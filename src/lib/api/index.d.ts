/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/me": {
    /** Retrieves the current user resource. */
    get: {
      responses: {
        /** @description User resource response */
        200: {
          content: {
            "application/json": components["schemas"]["Me"];
            "application/vnd.api+json": components["schemas"]["Me"];
            "text/html": components["schemas"]["Me"];
          };
        };
        /** @description Resource not found */
        404: {
          content: {
          };
        };
      };
    };
  };
  "/address_book_items": {
    /** Retrieves the collection of AddressBookItems resources. */
    get: operations["getAddressBookItemsCollection"];
  };
  "/address_book_items/{id}": {
    /** Retrieves a AddressBookItems resource. */
    get: operations["getAddressBookItemsItem"];
  };
  "/admin_users": {
    /** Retrieves the collection of AdminUser resources. */
    get: operations["getAdminUserCollection"];
  };
  "/admin_users/{id}": {
    /** Retrieves a AdminUser resource. */
    get: operations["getAdminUserItem"];
  };
  "/bulk_shipments": {
    /** Retrieves the collection of BulkShipment resources. */
    get: operations["getBulkShipmentCollection"];
  };
  "/bulk_shipments/{id}": {
    /** Retrieves a BulkShipment resource. */
    get: operations["getBulkShipmentItem"];
  };
  "/buzzie/postcodes": {
    /** Retrieves the collection of Postcode resources. */
    get: operations["buzzie-postcodesPostcodeCollection"];
  };
  "/conversations": {
    /** Retrieves the collection of Conversation resources. */
    get: operations["getConversationCollection"];
    /** Creates a Conversation resource. */
    post: operations["postConversationCollection"];
  };
  "/conversations/{id}": {
    /** Retrieves a Conversation resource. */
    get: operations["getConversationItem"];
  };
  "/conversations/{id}/messages": {
    /** Retrieves the collection of Message resources. */
    get: operations["api_conversations_messages_get_subresource"];
  };
  "/countries": {
    /** Retrieves the collection of Country resources. */
    get: operations["getCountryCollection"];
  };
  "/countries/{id}": {
    /** Retrieves a Country resource. */
    get: operations["getCountryItem"];
  };
  "/distributors": {
    /** Retrieves the collection of Distributor resources. */
    get: operations["getDistributorCollection"];
  };
  "/distributors/{id}": {
    /** Retrieves a Distributor resource. */
    get: operations["getDistributorItem"];
  };
  "/integrations": {
    /** Retrieves the collection of Integration resources. */
    get: operations["getIntegrationCollection"];
  };
  "/integrations/shopify": {
    /** Creates a ShopifyServiceIntegration resource. */
    post: operations["postShopifyServiceIntegrationCollection"];
  };
  "/integrations/shopify/{id}": {
    /** Retrieves a ShopifyServiceIntegration resource. */
    get: operations["getShopifyServiceIntegrationItem"];
  };
  "/integrations/{id}": {
    /** Retrieves a Integration resource. */
    get: operations["getIntegrationItem"];
  };
  "/labels/{id}": {
    /** Retrieves a Label resource. */
    get: operations["getLabelItem"];
  };
  "/matrices": {
    /** Retrieves the collection of Matrix resources. */
    get: operations["getMatrixCollection"];
  };
  "/matrices/{id}": {
    /** Retrieves a Matrix resource. */
    get: operations["getMatrixItem"];
  };
  "/matrix_groups": {
    /** Retrieves the collection of MatrixGroup resources. */
    get: operations["getMatrixGroupCollection"];
  };
  "/matrix_groups/{id}": {
    /** Retrieves a MatrixGroup resource. */
    get: operations["getMatrixGroupItem"];
  };
  "/matrix_postcodes": {
    /** Retrieves the collection of MatrixPostcode resources. */
    get: operations["getMatrixPostcodeCollection"];
  };
  "/matrix_postcodes/{id}": {
    /** Retrieves a MatrixPostcode resource. */
    get: operations["getMatrixPostcodeItem"];
  };
  "/matrix_rates": {
    /** Retrieves the collection of MatrixRate resources. */
    get: operations["getMatrixRateCollection"];
  };
  "/matrix_rates/{id}": {
    /** Retrieves a MatrixRate resource. */
    get: operations["getMatrixRateItem"];
  };
  "/messages": {
    /** Creates a Message resource. */
    post: operations["postMessageCollection"];
  };
  "/messages/{id}": {
    /** Retrieves a Message resource. */
    get: operations["getMessageItem"];
    /** Updates the Message resource. */
    patch: operations["patchMessageItem"];
  };
  "/orders": {
    /** Retrieves the collection of ExternalOrder resources. */
    get: operations["getExternalOrderCollection"];
    /** Creates a ExternalOrder resource. */
    post: operations["postExternalOrderCollection"];
  };
  "/orders/{id}": {
    /** Retrieves a ExternalOrder resource. */
    get: operations["getExternalOrderItem"];
    /** Replaces the ExternalOrder resource. */
    put: operations["putExternalOrderItem"];
    /** Removes the ExternalOrder resource. */
    delete: operations["deleteExternalOrderItem"];
  };
  "/pickup_requests": {
    /** Retrieves the collection of PickupRequest resources. */
    get: operations["getPickupRequestCollection"];
    /** Creates a PickupRequest resource. */
    post: operations["postPickupRequestCollection"];
  };
  "/pickup_requests/{id}": {
    /** Retrieves a PickupRequest resource. */
    get: operations["getPickupRequestItem"];
    /** Replaces the PickupRequest resource. */
    put: operations["putPickupRequestItem"];
    /** Removes the PickupRequest resource. */
    delete: operations["deletePickupRequestItem"];
    /** Updates the PickupRequest resource. */
    patch: operations["patchPickupRequestItem"];
  };
  "/rate-request": {
    /** Creates a Shipment resource. */
    post: operations["post_rateShipmentCollection"];
  };
  "/relations": {
    /** Retrieves the collection of Relation resources. */
    get: operations["getRelationCollection"];
  };
  "/relations/{id}": {
    /** Retrieves a Relation resource. */
    get: operations["getRelationItem"];
  };
  "/scan_inbounds": {
    /** Creates a ScanInbound resource. */
    post: operations["postScanInboundCollection"];
  };
  "/scan_inbounds/{uuid}": {
    /** Retrieves a ScanInbound resource. */
    get: operations["getScanInboundItem"];
  };
  "/services": {
    /** Creates a Shipment resource. */
    post: operations["post_serviceShipmentCollection"];
  };
  "/services/{id}": {
    /** Retrieves a Service resource. */
    get: operations["getServiceItem"];
  };
  "/shipment_quotations": {
    /** Retrieves the collection of ShipmentQuotation resources. */
    get: operations["getShipmentQuotationCollection"];
  };
  "/shipment_quotations/{id}": {
    /** Retrieves a ShipmentQuotation resource. */
    get: operations["getShipmentQuotationItem"];
  };
  "/shipments": {
    /** Retrieves the collection of Shipment resources. */
    get: operations["getShipmentCollection"];
    /** Creates a Shipment resource. */
    post: operations["postShipmentCollection"];
  };
  "/shipments/items/{id}": {
    /** Retrieves a Item resource. */
    get: operations["getItemItem"];
  };
  "/shipments/{id}": {
    /** Retrieves a Shipment resource. */
    get: operations["getShipmentItem"];
  };
  "/shipments/{id}/labels": {
    /** Retrieves the collection of Label resources. */
    get: operations["api_shipments_labels_get_subresource"];
  };
  "/surcharge_sets/{id}": {
    /** Retrieves a SurchargeSet resource. */
    get: operations["getSurchargeSetItem"];
  };
  "/track-and-trace/{id}": {
    /** Retrieves the collection of Label resources. */
    get: operations["track_and_traceLabelCollection"];
  };
  "/trackings": {
    /** Retrieves the collection of Tracking resources. */
    get: operations["getTrackingCollection"];
  };
  "/trackings/{id}": {
    /** Retrieves a Tracking resource. */
    get: operations["getTrackingItem"];
  };
  "/transport/depots": {
    /** Retrieves the collection of Depot resources. */
    get: operations["getDepotCollection"];
    /** Creates a Depot resource. */
    post: operations["postDepotCollection"];
  };
  "/transport/depots/{id}": {
    /** Retrieves a Depot resource. */
    get: operations["getDepotItem"];
    /** Replaces the Depot resource. */
    put: operations["putDepotItem"];
    /** Updates the Depot resource. */
    patch: operations["patchDepotItem"];
  };
  "/transport/drivers": {
    /** Retrieves the collection of Driver resources. */
    get: operations["getDriverCollection"];
    /** Creates a Driver resource. */
    post: operations["postDriverCollection"];
  };
  "/transport/drivers/{id}": {
    /** Retrieves a Driver resource. */
    get: operations["getDriverItem"];
    /** Replaces the Driver resource. */
    put: operations["putDriverItem"];
    /** Removes the Driver resource. */
    delete: operations["deleteDriverItem"];
    /** Updates the Driver resource. */
    patch: operations["patchDriverItem"];
  };
  "/transport/excluded_pickups": {
    /** Retrieves the collection of ExcludedPickup resources. */
    get: operations["getExcludedPickupCollection"];
    /** Creates a ExcludedPickup resource. */
    post: operations["postExcludedPickupCollection"];
  };
  "/transport/excluded_pickups/{id}": {
    /** Retrieves a ExcludedPickup resource. */
    get: operations["getExcludedPickupItem"];
    /** Replaces the ExcludedPickup resource. */
    put: operations["putExcludedPickupItem"];
    /** Updates the ExcludedPickup resource. */
    patch: operations["patchExcludedPickupItem"];
  };
  "/transport/pickup_requests": {
    /** Retrieves the collection of TransportPickupRequest resources. */
    get: operations["getTransportPickupRequestCollection"];
    /** Creates a TransportPickupRequest resource. */
    post: operations["postTransportPickupRequestCollection"];
  };
  "/transport/pickup_requests/{id}": {
    /** Retrieves a TransportPickupRequest resource. */
    get: operations["getTransportPickupRequestItem"];
    /** Replaces the TransportPickupRequest resource. */
    put: operations["putTransportPickupRequestItem"];
    /** Removes the TransportPickupRequest resource. */
    delete: operations["deleteTransportPickupRequestItem"];
    /** Updates the TransportPickupRequest resource. */
    patch: operations["patchTransportPickupRequestItem"];
  };
  "/transport/pickup_schedules": {
    /** Retrieves the collection of PickupSchedule resources. */
    get: operations["getPickupScheduleCollection"];
    /** Creates a PickupSchedule resource. */
    post: operations["postPickupScheduleCollection"];
  };
  "/transport/pickup_schedules/{id}": {
    /** Retrieves a PickupSchedule resource. */
    get: operations["getPickupScheduleItem"];
    /** Replaces the PickupSchedule resource. */
    put: operations["putPickupScheduleItem"];
    /** Updates the PickupSchedule resource. */
    patch: operations["patchPickupScheduleItem"];
  };
  "/transport/pickups": {
    /** Retrieves the collection of Pickup resources. */
    get: operations["getPickupCollection"];
  };
  "/transport/pickups/{id}": {
    /** Retrieves a Pickup resource. */
    get: operations["getPickupItem"];
  };
  "/transport/positions": {
    /** Retrieves the collection of Position resources. */
    get: operations["getPositionCollection"];
    /** Creates a Position resource. */
    post: operations["postPositionCollection"];
  };
  "/transport/positions/{id}": {
    /** Retrieves a Position resource. */
    get: operations["getPositionItem"];
  };
  "/transport/postcodes": {
    /** Retrieves the collection of Postcode resources. */
    get: operations["getPostcodeCollection"];
    /** Creates a Postcode resource. */
    post: operations["postPostcodeCollection"];
  };
  "/transport/postcodes/{id}": {
    /** Retrieves a Postcode resource. */
    get: operations["getPostcodeItem"];
    /** Replaces the Postcode resource. */
    put: operations["putPostcodeItem"];
    /** Removes the Postcode resource. */
    delete: operations["deletePostcodeItem"];
    /** Updates the Postcode resource. */
    patch: operations["patchPostcodeItem"];
  };
  "/transport/regions": {
    /** Retrieves the collection of Region resources. */
    get: operations["getRegionCollection"];
    /** Creates a Region resource. */
    post: operations["postRegionCollection"];
  };
  "/transport/regions/{id}": {
    /** Retrieves a Region resource. */
    get: operations["getRegionItem"];
    /** Replaces the Region resource. */
    put: operations["putRegionItem"];
    /** Updates the Region resource. */
    patch: operations["patchRegionItem"];
  };
  "/transport/route_collection_bulks": {
    /** Retrieves the collection of RouteCollectionBulk resources. */
    get: operations["getRouteCollectionBulkCollection"];
    /** Creates a RouteCollectionBulk resource. */
    post: operations["postRouteCollectionBulkCollection"];
  };
  "/transport/route_collection_bulks/{id}": {
    /** Retrieves a RouteCollectionBulk resource. */
    get: operations["getRouteCollectionBulkItem"];
    /** Replaces the RouteCollectionBulk resource. */
    put: operations["putRouteCollectionBulkItem"];
    /** Updates the RouteCollectionBulk resource. */
    patch: operations["patchRouteCollectionBulkItem"];
  };
  "/transport/route_collection_vehicles": {
    /** Retrieves the collection of RouteCollectionVehicle resources. */
    get: operations["getRouteCollectionVehicleCollection"];
    /** Creates a RouteCollectionVehicle resource. */
    post: operations["postRouteCollectionVehicleCollection"];
  };
  "/transport/route_collection_vehicles/{id}": {
    /** Retrieves a RouteCollectionVehicle resource. */
    get: operations["getRouteCollectionVehicleItem"];
    /** Replaces the RouteCollectionVehicle resource. */
    put: operations["putRouteCollectionVehicleItem"];
    /** Removes the RouteCollectionVehicle resource. */
    delete: operations["deleteRouteCollectionVehicleItem"];
    /** Updates the RouteCollectionVehicle resource. */
    patch: operations["patchRouteCollectionVehicleItem"];
  };
  "/transport/route_collections": {
    /** Retrieves the collection of RouteCollection resources. */
    get: operations["getRouteCollectionCollection"];
    /** Creates a RouteCollection resource. */
    post: operations["postRouteCollectionCollection"];
  };
  "/transport/route_collections/{id}": {
    /** Retrieves a RouteCollection resource. */
    get: operations["getRouteCollectionItem"];
    /** Replaces the RouteCollection resource. */
    put: operations["putRouteCollectionItem"];
    /** Updates the RouteCollection resource. */
    patch: operations["patchRouteCollectionItem"];
  };
  "/transport/route_collections/{id}/route_collection_bulks": {
    /** Retrieves the collection of RouteCollectionBulk resources. */
    get: operations["api_route_collections_route_collection_bulks_get_subresource"];
  };
  "/transport/route_collections/{id}/route_collection_vehicles": {
    /** Retrieves the collection of RouteCollectionVehicle resources. */
    get: operations["api_route_collections_route_collection_vehicles_get_subresource"];
  };
  "/transport/route_collections/{id}/routes": {
    /** Retrieves the collection of Route resources. */
    get: operations["api_route_collections_routes_get_subresource"];
  };
  "/transport/route_collections/{id}/routes/{routes}/steps": {
    /** Retrieves the collection of Step resources. */
    get: operations["api_route_collections_routes_steps_get_subresource"];
  };
  "/transport/route_collections/{id}/unassigneds": {
    /** Retrieves the collection of Unassigned resources. */
    get: operations["api_route_collections_unassigneds_get_subresource"];
  };
  "/transport/routes": {
    /** Retrieves the collection of Route resources. */
    get: operations["getRouteCollection"];
  };
  "/transport/routes/{id}": {
    /** Retrieves a Route resource. */
    get: operations["getRouteItem"];
    /** Replaces the Route resource. */
    put: operations["putRouteItem"];
    /** Updates the Route resource. */
    patch: operations["patchRouteItem"];
  };
  "/transport/routes/{id}/steps": {
    /** Retrieves the collection of Step resources. */
    get: operations["api_routes_steps_get_subresource"];
  };
  "/transport/statuses": {
    /** Retrieves the collection of Status resources. */
    get: operations["getStatusCollection"];
    /** Creates a Status resource. */
    post: operations["postStatusCollection"];
  };
  "/transport/statuses/{id}": {
    /** Retrieves a Status resource. */
    get: operations["getStatusItem"];
  };
  "/transport/steps": {
    /** Retrieves the collection of Step resources. */
    get: operations["getStepCollection"];
  };
  "/transport/steps/{id}": {
    /** Retrieves a Step resource. */
    get: operations["getStepItem"];
    /** Removes the Step resource. */
    delete: operations["deleteStepItem"];
  };
  "/transport/task_activities": {
    /** Retrieves the collection of TaskActivity resources. */
    get: operations["getTaskActivityCollection"];
  };
  "/transport/task_activities/{id}": {
    /** Retrieves a TaskActivity resource. */
    get: operations["getTaskActivityItem"];
  };
  "/transport/task_labels": {
    /** Retrieves the collection of TaskLabel resources. */
    get: operations["getTaskLabelCollection"];
  };
  "/transport/task_labels/{id}": {
    /** Retrieves a TaskLabel resource. */
    get: operations["getTaskLabelItem"];
    /** Replaces the TaskLabel resource. */
    put: operations["putTaskLabelItem"];
  };
  "/transport/task_pickups": {
    /** Retrieves the collection of TaskPickup resources. */
    get: operations["getTaskPickupCollection"];
  };
  "/transport/task_pickups/{id}": {
    /** Retrieves a TaskPickup resource. */
    get: operations["getTaskPickupItem"];
    /** Replaces the TaskPickup resource. */
    put: operations["putTaskPickupItem"];
  };
  "/transport/tasks": {
    /** Retrieves the collection of Task resources. */
    get: operations["getTaskCollection"];
  };
  "/transport/tasks/{id}": {
    /** Retrieves a Task resource. */
    get: operations["getTaskItem"];
    /** Replaces the Task resource. */
    put: operations["putTaskItem"];
  };
  "/transport/unassigned_labels": {
    /** Retrieves the collection of UnassignedLabel resources. */
    get: operations["getUnassignedLabelCollection"];
  };
  "/transport/unassigned_labels/{id}": {
    /** Retrieves a UnassignedLabel resource. */
    get: operations["getUnassignedLabelItem"];
  };
  "/transport/unassigned_pickups": {
    /** Retrieves the collection of UnassignedPickup resources. */
    get: operations["getUnassignedPickupCollection"];
  };
  "/transport/unassigned_pickups/{id}": {
    /** Retrieves a UnassignedPickup resource. */
    get: operations["getUnassignedPickupItem"];
  };
  "/transport/unassigned_shipments": {
    /** Retrieves the collection of UnassignedShipment resources. */
    get: operations["getUnassignedShipmentCollection"];
  };
  "/transport/unassigned_shipments/{id}": {
    /** Retrieves a UnassignedShipment resource. */
    get: operations["getUnassignedShipmentItem"];
  };
  "/transport/unassigneds": {
    /** Retrieves the collection of Unassigned resources. */
    get: operations["getUnassignedCollection"];
  };
  "/transport/unassigneds/{id}": {
    /** Retrieves a Unassigned resource. */
    get: operations["getUnassignedItem"];
  };
  "/transport/vehicles": {
    /** Retrieves the collection of Vehicle resources. */
    get: operations["getVehicleCollection"];
    /** Creates a Vehicle resource. */
    post: operations["postVehicleCollection"];
  };
  "/transport/vehicles/{id}": {
    /** Retrieves a Vehicle resource. */
    get: operations["getVehicleItem"];
    /** Replaces the Vehicle resource. */
    put: operations["putVehicleItem"];
    /** Removes the Vehicle resource. */
    delete: operations["deleteVehicleItem"];
    /** Updates the Vehicle resource. */
    patch: operations["patchVehicleItem"];
  };
  "/transport/warehouse/{waybill}/info": {
    /** Retrieves a WarehouseInformation resource. */
    get: operations["getWarehouseInformationItem"];
  };
  "/transport/warehouse_informations": {
    /** Retrieves the collection of WarehouseInformation resources. */
    get: operations["getWarehouseInformationCollection"];
  };
  "/types": {
    /** Retrieves the collection of Type resources. */
    get: operations["getTypeCollection"];
  };
  "/types/{id}": {
    /** Retrieves a Type resource. */
    get: operations["getTypeItem"];
  };
  "/users": {
    /** Retrieves the collection of User resources. */
    get: operations["getUserCollection"];
    /** Creates a User resource. */
    post: operations["postUserCollection"];
  };
  "/users/{id}": {
    /** Retrieves a User resource. */
    get: operations["getUserItem"];
  };
  "/webhooks": {
    /** Retrieves the collection of Webhook resources. */
    get: operations["getWebhookCollection"];
    /** Creates a Webhook resource. */
    post: operations["postWebhookCollection"];
  };
  "/webhooks/{id}": {
    /** Retrieves a Webhook resource. */
    get: operations["getWebhookItem"];
  };
  "/widgets": {
    /** Retrieves the collection of Widget resources. */
    get: operations["getWidgetCollection"];
  };
  "/widgets/{id}": {
    /** Retrieves a Widget resource. */
    get: operations["getWidgetItem"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Me: {
      name?: string;
      number?: string;
      id?: string;
      conversation?: string;
    };
    Address: {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      stateOrProvince?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
      coordinates?: components["schemas"]["Point"];
      benelux?: boolean;
      eU?: boolean;
      europe?: boolean;
    };
    "Address-ScanInbound.Read": {
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
    };
    "Address-address_book-collection-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-address_book-item-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-order-item-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-order-write": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-pickup_request-collection-read": {
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      coordinates?: components["schemas"]["Point-pickup_request-collection-read"];
    };
    "Address-shipment-collection-read": {
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      coordinates?: components["schemas"]["Point-shipment-collection-read"];
    };
    "Address-shipment-item-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-shipment-quotation-item-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-shipment-write": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
      privateAddress?: boolean;
      forkliftOrLoadingDockAvailable?: boolean;
      accessibleWithTrailer?: boolean;
    };
    "Address-transport-depot-collection-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-depot-collection-read"];
    };
    "Address-transport-depot-collection-write": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-depot-collection-write"];
    };
    "Address-transport-depot-item-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-depot-item-read"];
    };
    "Address-transport-depot-item-write": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-depot-item-write"];
    };
    "Address-transport-pickup-collection-read": Record<string, never>;
    "Address-transport-pickup_schedule-collection-read": {
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      coordinates?: components["schemas"]["Point-transport-pickup_schedule-collection-read"];
    };
    "Address-transport-route-item-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-route-item-read"];
    };
    "Address-transport-step-collection-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-step-collection-read"];
    };
    "Address-transport-task-collection-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-task-collection-read"];
    };
    "Address-transport-task-collection-read_transport-task_label-collection-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-task-collection-read_transport-task_label-collection-read"];
    };
    "Address-transport-task-item-read": {
      addressLine1?: string;
      postcode?: string;
      city?: string;
      country?: string;
      coordinates?: components["schemas"]["Point-transport-task-item-read"];
    };
    "Address-transport-unassigned-item-read": {
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
    };
    "Address-transport-warehouse_waybill_info-read": {
      street?: string;
      number?: string;
      numberAddition?: string;
      postcode?: string;
      city?: string;
      /**
       * @default NL
       * @example NL
       */
      country?: string;
      addressLine1?: string;
      addressLine2?: string;
    };
    "AddressBookItems-address_book-collection-read": {
      reference?: string;
      type?: string;
      contact?: components["schemas"]["Contact-address_book-collection-read"];
      address?: components["schemas"]["Address-address_book-collection-read"];
      /** Format: uuid */
      id?: string;
    };
    "AddressBookItems-address_book-item-read": {
      reference?: string;
      type?: string;
      dpdCustomerNumber?: string;
      dpdDepotCode?: string;
      contact?: components["schemas"]["Contact-address_book-item-read"];
      address?: components["schemas"]["Address-address_book-item-read"];
      instructions?: string;
      vatNumber?: string;
      timeWindow?: components["schemas"]["TimeWindow-address_book-item-read"];
      /** Format: uuid */
      id?: string;
    };
    "AddressBookItems-pickup_request-collection-read": {
      contact?: components["schemas"]["Contact-pickup_request-collection-read"];
      address?: components["schemas"]["Address-pickup_request-collection-read"];
    };
    "AddressBookItems-transport-pickup-collection-read": {
      contact?: components["schemas"]["Contact-transport-pickup-collection-read"];
      address?: components["schemas"]["Address-transport-pickup-collection-read"];
    };
    "AddressBookItems-transport-pickup_schedule-collection-read": {
      contact?: components["schemas"]["Contact-transport-pickup_schedule-collection-read"];
      address?: components["schemas"]["Address-transport-pickup_schedule-collection-read"];
    };
    "AddressBookItems-transport-unassigned-item-read": {
      contact?: components["schemas"]["Contact-transport-unassigned-item-read"];
      address?: components["schemas"]["Address-transport-unassigned-item-read"];
      /** Format: uuid */
      id?: string;
    };
    "AdminUser-admin-user-item-read": {
      /** Format: uuid */
      id?: string;
      username?: string;
    };
    "AdminUser-admin-user-read": {
      /** Format: uuid */
      id?: string;
      username?: string;
    };
    "AdminUser-transport-task-collection-read_transport-task_label-collection-read": {
      name?: string;
    };
    Brand: {
      /** Format: iri-reference */
      relation?: string;
      trackingPage?: components["schemas"]["TrackingPage"];
      integrations?: string[];
      clients?: components["schemas"]["Client"][];
      bulkShipments?: string[];
      trackingEmails?: components["schemas"]["TrackingEmail"][];
      /** @description Used to identify if brand is default for relation. */
      default?: boolean;
      name?: string;
      /** @description Property will be used to host track & trace page. */
      shopName?: string;
      /**
       * @default #2C613E
       * @example #2C613E
       */
      primaryColor?: string;
      /**
       * @default #f3f4f6
       * @example #f3f4f6
       */
      secondaryColor?: string;
      /** Format: binary */
      logoFile?: string;
      logo?: components["schemas"]["File"];
      /**
       * @default #6B7280
       * @example #6B7280
       */
      headerTextColor?: string;
      /**
       * @default #ffffff
       * @example #ffffff
       */
      headerBackgroundColor?: string;
      homepageUrl?: string;
      webshopUrl?: string;
      contactUrl?: string;
      /**
       * @default #6B7280
       * @example #6B7280
       */
      footerTextColor?: string;
      /**
       * @default #ffffff
       * @example #ffffff
       */
      footerBackgroundColor?: string;
      street?: string;
      postcode?: string;
      city?: string;
      country?: string;
      phoneNumber?: components["schemas"]["PhoneNumber"];
      emailAddress?: string;
      sendTrackingEmails?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      primaryColorText?: string;
      secondaryColorText?: string;
      relationPaths?: readonly string[];
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    BrandEmailRecipient: {
      name?: string;
      value?: string;
      displayValue?: string;
    };
    "BulkShipment-bulk-shipment-collection-read": Record<string, never>;
    "BulkShipment-bulk-shipment-item-read": Record<string, never>;
    "BulkShipment-shipment-collection-read": {
      reference?: string;
    };
    "BulkShipment-transport-route_collection-item-read": {
      relation?: components["schemas"]["Relation-transport-route_collection-item-read"];
      reference?: string;
      /** Format: uuid */
      id?: string;
    };
    "BulkShipment-transport-unassigned-item-read": {
      reference?: string;
      /** Format: uuid */
      id?: string;
    };
    Category: {
      tasks?: readonly components["schemas"]["Task"][];
      title?: string;
      icon?: string;
      color?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Client: {
      identifier?: string;
      brand?: components["schemas"]["Brand"];
      /** Format: iri-reference */
      relation?: string;
      /** Format: iri-reference */
      defaultFromAddress?: string;
      remark?: string;
      defaultPrintProfile?: components["schemas"]["PrintProfile"];
      id?: string;
      name?: string;
      secret?: string;
      redirectUris?: components["schemas"]["RedirectUri"][];
      grants?: components["schemas"]["Grant"][];
      scopes?: components["schemas"]["Scope"][];
      active?: boolean;
      allowPlainTextPkce?: boolean;
      confidential?: boolean;
      plainTextPkceAllowed?: boolean;
    };
    "Client-integration-item-post-read": Record<string, never>;
    Collection: {
      /** @description Checks whether the collection is empty (contains no elements). */
      empty?: boolean;
      /** @description Gets all keys/indices of the collection. */
      keys?: readonly number[];
      /** @description Gets all values of the collection. */
      values?: readonly string[];
      iterator?: Record<string, never>;
    };
    "Collection-transport-warehouse_waybill_info-read": Record<string, never>;
    CommercialInvoice: {
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      uploadedBy?: string;
      /**
       * @default uploaded
       * @example uploaded
       */
      type?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "ComputingTimes-transport-route_collection-item-read": {
      loading?: number;
      solving?: number;
      routing?: number;
    };
    "ComputingTimes-transport-route_collection-item-write": Record<string, never>;
    Contact: {
      gender?: string;
      firstName?: string;
      lastName?: string;
      emailAddress?: string;
      formattedName?: string;
    };
    "Contact-address_book-collection-read": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-address_book-collection-read"];
      emailAddress?: string;
    };
    "Contact-address_book-item-read": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-address_book-item-read"];
      emailAddress?: string;
    };
    "Contact-pickup_request-collection-read": {
      name?: string;
      company?: string;
    };
    "Contact-shipment-item-read": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-shipment-item-read"];
      emailAddress?: string;
    };
    "Contact-shipment-quotation-item-read": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-shipment-quotation-item-read"];
      emailAddress?: string;
    };
    "Contact-shipment-write": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-shipment-write"];
      emailAddress?: string;
    };
    "Contact-transport-pickup-collection-read": {
      name?: string;
      company?: string;
    };
    "Contact-transport-pickup_schedule-collection-read": {
      name?: string;
      company?: string;
    };
    "Contact-transport-task-item-read": {
      name?: string;
      company?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-task-item-read"];
      emailAddress?: string;
    };
    "Contact-transport-unassigned-item-read": {
      name?: string;
      company?: string;
    };
    "Contact-transport-warehouse_waybill_info-read": {
      name?: string;
      company?: string;
    };
    "Content-shipment-item-read": {
      description: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
      /** @example 1 */
      quantity?: number;
      weight?: string;
      value?: number;
      dimensions?: components["schemas"]["Dimensions-shipment-item-read"];
    };
    "Content-shipment-write": {
      description: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
      /** @example 1 */
      quantity?: number;
      weight?: string;
      value?: number;
      dimensions?: components["schemas"]["Dimensions-shipment-write"];
    };
    "Content-shipment_item-item-read": {
      description: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
      /** @example 1 */
      quantity?: number;
      weight?: string;
      value?: number;
      dimensions?: components["schemas"]["Dimensions-shipment_item-item-read"];
    };
    "Conversation-conversation-item-read": {
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      shipmentQuotation?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      subject?: string;
      subjectType?: string;
    };
    "Conversation-conversation-read": {
      shipment?: components["schemas"]["Shipment-conversation-read"];
      shipmentQuotation?: components["schemas"]["ShipmentQuotation-conversation-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      subject?: string;
      subjectType?: string;
    };
    "Conversation-conversation-write": {
      /** Format: iri-reference */
      relation?: string;
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      shipmentQuotation?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Conversation-shipment-item-read": {
      /** Format: uuid */
      id?: string;
    };
    "Conversation-shipment-quotation-item-read": {
      /** Format: uuid */
      id?: string;
    };
    "Country-country-item-read": {
      code?: string;
      /** Format: uuid */
      id?: string;
    };
    "Country-country-read": {
      code?: string;
      /** Format: uuid */
      id?: string;
    };
    CustomsInformationContents: {
      name?: string;
      value?: string;
      displayValue?: string;
    };
    "DateRange-transport-task-collection-read": {
      /** Format: date-time */
      begin: string;
      /** Format: date-time */
      end: string;
    };
    "DateRange-transport-task-collection-read_transport-task_label-collection-read": {
      /** Format: date-time */
      begin: string;
      /** Format: date-time */
      end: string;
    };
    "DateRange-transport-task-item-read": {
      /** Format: date-time */
      begin: string;
      /** Format: date-time */
      end: string;
    };
    "DateRange-transport-task-item-write": {
      /** Format: date-time */
      begin: string;
      /** Format: date-time */
      end: string;
    };
    Delivery: {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Delivery-shipment-collection-read": {
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-collection-read"];
    };
    "Delivery-shipment-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-item-read"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Delivery-shipment-quotation-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-quotation-item-read"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Delivery-shipment-write": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-write"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Delivery-transport-unassigned-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-unassigned-item-read"];
    };
    Depot: {
      /** Format: iri-reference */
      region?: string;
      key?: string;
      description: string;
      vehicles?: string[];
      /** Format: iri-reference */
      distributor: string;
      address?: components["schemas"]["Address"];
      timeWindow?: components["schemas"]["TimeWindow"];
      required?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Depot-transport-depot-collection-read": {
      key?: string;
      description: string;
      distributor: components["schemas"]["Distributor-transport-depot-collection-read"];
      address?: components["schemas"]["Address-transport-depot-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-depot-collection-read"];
      required?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Depot-transport-depot-collection-write": {
      description: string;
      /** Format: iri-reference */
      distributor: string;
      address?: components["schemas"]["Address-transport-depot-collection-write"];
      timeWindow?: components["schemas"]["TimeWindow-transport-depot-collection-write"];
      required?: boolean;
    };
    "Depot-transport-depot-item-read": {
      description: string;
      distributor: components["schemas"]["Distributor-transport-depot-item-read"];
      address?: components["schemas"]["Address-transport-depot-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-depot-item-read"];
      required?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Depot-transport-depot-item-write": {
      description: string;
      /** Format: iri-reference */
      distributor: string;
      address?: components["schemas"]["Address-transport-depot-item-write"];
      required?: boolean;
    };
    "Depot-transport-pickup-collection-read": {
      description: string;
    };
    "Depot-transport-pickup_schedule-collection-read": {
      description: string;
    };
    "Depot-transport-pickup_schedule-item-read": {
      description: string;
    };
    "Depot-transport-region-collection-read": {
      description: string;
    };
    "Depot-transport-region-item-read": {
      description: string;
    };
    "Depot-transport-route_collection-collection-read": {
      region?: components["schemas"]["Region-transport-route_collection-collection-read"];
      description: string;
    };
    "Depot-transport-route_collection-item-read": {
      description: string;
    };
    "Depot-transport-step-collection-read": {
      description: string;
      /** Format: iri-reference */
      distributor: string;
      /** Format: uuid */
      id?: string;
    };
    "Depot-transport-unassigned-item-read": {
      description: string;
    };
    "Depot-transport-vehicle-collection-read": {
      description: string;
    };
    "Depot-transport-vehicle-item-read": {
      description: string;
    };
    "Depot-transport-vehicle-item-write": {
      description: string;
    };
    Dimensions: {
      length?: number;
      width?: number;
      height?: number;
      longestSideProperty?: string;
      longestSide?: number;
      volume?: number;
    };
    "Dimensions-ScanInbound.Read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-ScanInbound.Write": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-matrix-group-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-matrix-group-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-matrix-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-matrix-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-order-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-order-write": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-shipment-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-shipment-quotation-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-shipment-write": {
      length?: number;
      width?: number;
      height?: number;
    };
    "Dimensions-shipment_item-item-read": {
      length?: number;
      width?: number;
      height?: number;
    };
    Dispatch: {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Dispatch-shipment-collection-read": {
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-collection-read"];
    };
    "Dispatch-shipment-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-item-read"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Dispatch-shipment-quotation-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-quotation-item-read"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Dispatch-shipment-write": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-shipment-write"];
      vatNumber?: string;
      eoriNumber?: string;
    };
    "Dispatch-transport-unassigned-item-read": {
      instructions?: string;
      reference?: string;
      /** Format: date-time */
      date?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-unassigned-item-read"];
    };
    "Distributor-ScanInbound.Read": {
      name: string;
      code: string;
    };
    "Distributor-distributor-collection-read": {
      name: string;
    };
    "Distributor-distributor-item-read": {
      name: string;
    };
    "Distributor-shipment-quotation-item-read": {
      name: string;
      code: string;
      /** Format: uuid */
      id?: string;
    };
    "Distributor-transport-depot-collection-read": {
      name: string;
      /** Format: uuid */
      id?: string;
    };
    "Distributor-transport-depot-item-read": {
      name: string;
      /** Format: uuid */
      id?: string;
    };
    "Driver-transport-driver-collection-read": {
      name?: string;
      firstName: string;
      lastNamePrefix?: string;
      lastName: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-driver-collection-read"];
      availableDays: string[];
      /** Format: date-time */
      employmentStartedAt: string;
      /** Format: date-time */
      employmentEndedAt?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Driver-transport-driver-collection-write": {
      firstName: string;
      lastNamePrefix?: string;
      lastName: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-driver-collection-write"];
      availableDays: string[];
      /** Format: date-time */
      employmentStartedAt: string;
      /** Format: date-time */
      employmentEndedAt?: string;
    };
    "Driver-transport-driver-item-read": {
      name?: string;
      firstName: string;
      lastNamePrefix?: string;
      lastName: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-driver-item-read"];
      availableDays: string[];
      /** Format: date-time */
      employmentStartedAt: string;
      /** Format: date-time */
      employmentEndedAt?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Driver-transport-driver-item-write": {
      firstName: string;
      lastNamePrefix?: string;
      lastName: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-driver-item-write"];
      availableDays: string[];
      /** Format: date-time */
      employmentStartedAt: string;
      /** Format: date-time */
      employmentEndedAt?: string;
    };
    "Driver-transport-route-collection-read": {
      name?: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-route-collection-read"];
      /** Format: uuid */
      id?: string;
    };
    "Driver-transport-route-item-read": {
      name?: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-route-item-read"];
      /** Format: uuid */
      id?: string;
    };
    "Driver-transport-route_collection-item-read": {
      name?: string;
      phoneNumber: components["schemas"]["PhoneNumber-transport-route_collection-item-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "ExcludedPickup-transport-excluded_pickup-collection-read": {
      /** Format: date-time */
      date: string;
      description: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "ExcludedPickup-transport-excluded_pickup-collection-write": {
      /** Format: date-time */
      date: string;
      description: string;
    };
    "ExcludedPickup-transport-excluded_pickup-item-read": {
      /** Format: date-time */
      date: string;
      description: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "ExcludedPickup-transport-excluded_pickup-item-write": {
      /** Format: date-time */
      date: string;
      description: string;
    };
    ExpressionRule: {
      shipment?: string;
      rate?: string;
      item?: string;
    };
    /** @description Create this index manually! Created_at must be DESC, also, recreate on MySQL 8. */
    "ExternalOrder-order-collection-read": {
      externalId?: string;
      reference?: string;
      /** Format: date-time */
      createdAtSource: string;
      archived?: boolean;
      /** Format: uuid */
      id?: string;
    };
    /** @description Create this index manually! Created_at must be DESC, also, recreate on MySQL 8. */
    "ExternalOrder-order-item-read": {
      externalId?: string;
      reference?: string;
      orderLines?: components["schemas"]["ExternalOrderLine-order-item-read"][];
      /** Format: date-time */
      createdAtSource: string;
      shipTo?: components["schemas"]["ExternalOrderShipTo-order-item-read"];
      shipments?: readonly string[];
      archived?: boolean;
      /** Format: uuid */
      id?: string;
    };
    /** @description Create this index manually! Created_at must be DESC, also, recreate on MySQL 8. */
    "ExternalOrder-order-write": {
      externalId?: string;
      reference?: string;
      orderLines?: components["schemas"]["ExternalOrderLine-order-write"][];
      /** Format: date-time */
      createdAtSource: string;
      shipTo?: components["schemas"]["ExternalOrderShipTo-order-write"];
    };
    "ExternalOrderContact-order-item-read": {
      plainPhoneNumber?: string;
      name?: string;
      company?: string;
      emailAddress?: string;
    };
    "ExternalOrderContact-order-write": {
      plainPhoneNumber?: string;
      name?: string;
      company?: string;
      emailAddress?: string;
    };
    "ExternalOrderLine-order-item-read": {
      externalId?: string;
      quantity?: number;
      description?: string;
      dimensions?: components["schemas"]["Dimensions-order-item-read"];
      weight?: number;
      value?: number;
      tariffNumber?: string;
      /** Format: uuid */
      id?: string;
    };
    "ExternalOrderLine-order-write": {
      externalId?: string;
      quantity?: number;
      description?: string;
      dimensions?: components["schemas"]["Dimensions-order-write"];
      weight?: number;
      value?: number;
      tariffNumber?: string;
    };
    "ExternalOrderShipTo-order-item-read": {
      contact?: components["schemas"]["ExternalOrderContact-order-item-read"];
      address?: components["schemas"]["Address-order-item-read"];
    };
    "ExternalOrderShipTo-order-write": {
      contact?: components["schemas"]["ExternalOrderContact-order-write"];
      address?: components["schemas"]["Address-order-write"];
    };
    File: {
      name?: string;
      originalName?: string;
      mimeType?: string;
      size?: number;
      dimensions?: string[];
      /** @description A simple shortcut to the image width. */
      width?: number;
      /** @description A simple shortcut to the image height. */
      height?: number;
      /** @description Format image dimensions for use with html (to avoid layout shifting). */
      htmlDimensions?: string;
    };
    Fulfilment: {
      instructions?: string;
    };
    "Fulfilment-shipment-item-read": {
      instructions?: string;
    };
    "Fulfilment-shipment-write": {
      instructions?: string;
    };
    "Fulfilment-transport-warehouse_waybill_info-read": {
      instructions?: string;
    };
    Grant: Record<string, never>;
    Group: {
      description: string;
      sequence: number;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Insurance: {
      deductibleExcess?: number;
      insuredValue?: number;
    };
    "Insurance-shipment-item-read": {
      deductibleExcess?: number;
      insuredValue?: number;
    };
    "Insurance-shipment-write": {
      deductibleExcess?: number;
      insuredValue?: number;
    };
    "Integration-integration-collection-read": {
      externalAccountId?: string;
      shopUrl?: string;
      /** Format: uuid */
      id?: string;
      type?: string;
    };
    "Integration-integration-item-read": {
      externalAccountId?: string;
      shopUrl?: string;
      /** Format: uuid */
      id?: string;
      type?: string;
    };
    Invoice: {
      errorMessage?: string;
      batch?: components["schemas"]["InvoiceBatch"];
      /** Format: iri-reference */
      relation?: string;
      ledger?: components["schemas"]["Ledger"];
      shipments?: string[];
      bulkShipments?: string[];
      exactSalesInvoiceId?: string;
      number?: number;
      /** Format: date-time */
      date?: string;
      amount?: number;
      difference?: number;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relationPaths?: readonly string[];
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    InvoiceBatch: {
      /**
       * @default new
       * @example new
       */
      status?: string;
      /** Format: date-time */
      date?: string;
      frequency?: string;
      invoices?: components["schemas"]["Invoice"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Item-ScanInbound.Read": {
      dimensions?: components["schemas"]["Dimensions-ScanInbound.Read"];
      /**
       * @default 0.0
       * @example 0.0
       */
      weight?: string;
    };
    "Item-shipment-item-read": {
      contents?: components["schemas"]["Content-shipment-item-read"][];
      /** @example 1 */
      quantity?: number;
      type?: components["schemas"]["Type-shipment-item-read"];
      stackable?: boolean;
      dimensions?: components["schemas"]["Dimensions-shipment-item-read"];
      /**
       * @default 0.0
       * @example 0.0
       */
      weight?: string;
      description?: string;
      value?: number;
      customerReference?: string;
      customerReference2?: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
    };
    "Item-shipment-quotation-item-read": {
      /** @example 1 */
      quantity?: number;
      /** Format: iri-reference */
      type?: string;
      stackable?: boolean;
      dimensions?: components["schemas"]["Dimensions-shipment-quotation-item-read"];
      /**
       * @default 0.0
       * @example 0.0
       */
      weight?: string;
      description?: string;
      value?: number;
      customerReference?: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
    };
    "Item-shipment-write": {
      contents?: components["schemas"]["Content-shipment-write"][];
      /** @example 1 */
      quantity?: number;
      /** Format: iri-reference */
      type?: string;
      stackable?: boolean;
      dimensions?: components["schemas"]["Dimensions-shipment-write"];
      /**
       * @default 0.0
       * @example 0.0
       */
      weight?: string;
      description?: string;
      value?: number;
      customerReference?: string;
      customerReference2?: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
    };
    "Item-shipment_item-item-read": {
      contents?: components["schemas"]["Content-shipment_item-item-read"][];
      /** @example 1 */
      quantity?: number;
      /** Format: iri-reference */
      type?: string;
      stackable?: boolean;
      dimensions?: components["schemas"]["Dimensions-shipment_item-item-read"];
      /**
       * @default 0.0
       * @example 0.0
       */
      weight?: string;
      description?: string;
      value?: number;
      customerReference?: string;
      customerReference2?: string;
      tariffNumber?: string;
      countryOfOrigin?: string;
    };
    Label: {
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      distributor?: string;
      trackings?: string[];
      waybill?: string;
      reference?: string;
      /** Format: date-time */
      mailSentAt?: string;
      podAvailable?: boolean;
      /**
       * @default true
       * @example true
       */
      distributorHasPodAvailable?: boolean;
      receiverName?: string;
      status?: string;
      /** Format: date-time */
      nextTrackingUpdate?: string;
      /** Format: date-time */
      lastProcessedTime?: string;
      transportTasks?: string[];
      trackAndTraceLink?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relationPaths?: readonly string[];
      /** Format: iri-reference */
      shipmentItem?: string;
      mailSent?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Label-ScanInbound.Read": {
      shipment?: components["schemas"]["Shipment-ScanInbound.Read"];
      waybill?: string;
      shipmentItem?: components["schemas"]["Item-ScanInbound.Read"];
    };
    "Label-label-read": {
      waybill?: string;
      reference?: string;
      status?: string;
      /** Format: uuid */
      id?: string;
    };
    "Label-shipment-item-read": {
      waybill?: string;
      reference?: string;
      status?: string;
      trackAndTraceLink?: string;
      /** Format: uuid */
      id?: string;
    };
    "Label-transport-task-collection-read_transport-task_label-collection-read": {
      shipment?: components["schemas"]["Shipment-transport-task-collection-read_transport-task_label-collection-read"];
      waybill?: string;
    };
    "Label-transport-task-item-read": {
      shipment?: components["schemas"]["Shipment-transport-task-item-read"];
      waybill?: string;
    };
    "Label-transport-unassigned-item-read": {
      waybill?: string;
    };
    Ledger: {
      code: string;
      description: string;
      distributors?: readonly string[];
      /** Format: uuid */
      id?: string;
      exactId?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Load: {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-route-item-read": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-route_collection-item-read": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-step-collection-read": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-vehicle-collection-read": Record<string, never>;
    "Load-transport-vehicle-collection-write": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-vehicle-item-read": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "Load-transport-vehicle-item-write": {
      packages?: number;
      volume?: number;
      loadingMeters?: number;
      weight?: number;
    };
    "LocationDetails-firebase.transport-position.write": {
      coordinates?: components["schemas"]["Point-firebase.transport-position.write"];
      bearing?: number;
      speed?: number;
      /** Format: date-time */
      datetime?: string;
    };
    "Matrix-matrix-group-item-read": {
      name: string;
      rates?: components["schemas"]["MatrixRate-matrix-group-item-read"][];
      maxDimensions?: components["schemas"]["Dimensions-matrix-group-item-read"];
      maxWeight?: number;
      /**
       * @default true
       * @example true
       */
      active?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Matrix-matrix-group-read": {
      name: string;
      rates?: components["schemas"]["MatrixRate-matrix-group-read"][];
      maxDimensions?: components["schemas"]["Dimensions-matrix-group-read"];
      maxWeight?: number;
      /**
       * @default true
       * @example true
       */
      active?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Matrix-matrix-item-read": {
      /** Format: iri-reference */
      group?: string;
      name: string;
      rates?: components["schemas"]["MatrixRate-matrix-item-read"][];
      maxDimensions?: components["schemas"]["Dimensions-matrix-item-read"];
      maxWeight?: number;
      /**
       * @default true
       * @example true
       */
      active?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Matrix-matrix-read": {
      /** Format: iri-reference */
      group?: string;
      name: string;
      rates?: components["schemas"]["MatrixRate-matrix-read"][];
      maxDimensions?: components["schemas"]["Dimensions-matrix-read"];
      maxWeight?: number;
      /**
       * @default true
       * @example true
       */
      active?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "MatrixGroup-matrix-group-item-read": {
      name: string;
      matrices?: components["schemas"]["Matrix-matrix-group-item-read"][];
      /** Format: iri-reference */
      relation: string;
      countries?: string[];
      postcodes?: components["schemas"]["MatrixPostcode-matrix-group-item-read"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "MatrixGroup-matrix-group-read": {
      name: string;
      matrices?: components["schemas"]["Matrix-matrix-group-read"][];
      /** Format: iri-reference */
      relation: string;
      countries?: string[];
      postcodes?: components["schemas"]["MatrixPostcode-matrix-group-read"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "MatrixPostcode-matrix-group-item-read": {
      /** Format: iri-reference */
      country: string;
      /** @description Range of the postcode where ranges are separated by a comma. Ranges can be defined by a dash e.g. 1000-1100 or a single postcode. */
      ranges?: string[];
    };
    "MatrixPostcode-matrix-group-read": {
      /** Format: iri-reference */
      country: string;
      /** @description Range of the postcode where ranges are separated by a comma. Ranges can be defined by a dash e.g. 1000-1100 or a single postcode. */
      ranges?: string[];
    };
    "MatrixPostcode-matrix-postcode-item-read": Record<string, never>;
    "MatrixPostcode-matrix-postcode-read": Record<string, never>;
    "MatrixRate-matrix-group-item-read": {
      service: components["schemas"]["Service-matrix-group-item-read"];
      price?: number;
      /** Format: uuid */
      id?: string;
    };
    "MatrixRate-matrix-group-read": {
      service: components["schemas"]["Service-matrix-group-read"];
      price?: number;
      /** Format: uuid */
      id?: string;
    };
    "MatrixRate-matrix-item-read": {
      service: components["schemas"]["Service-matrix-item-read"];
      price?: number;
      /** Format: uuid */
      id?: string;
    };
    "MatrixRate-matrix-rate-item-read": Record<string, never>;
    "MatrixRate-matrix-rate-read": Record<string, never>;
    "MatrixRate-matrix-read": {
      service: components["schemas"]["Service-matrix-read"];
      price?: number;
      /** Format: uuid */
      id?: string;
    };
    Message: {
      /** Format: iri-reference */
      user?: string;
      /** Format: iri-reference */
      employee?: string;
      /** Format: iri-reference */
      conversation?: string;
      internal?: boolean;
      text: string;
      readByUser?: boolean;
      readByEmployee?: boolean;
      notificationSent?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      excerpt?: string;
      relationPaths?: readonly string[];
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Message-message-patch": {
      text: string;
    };
    "Message-message-read": Record<string, never>;
    "Message-message-write": {
      /** Format: iri-reference */
      conversation?: string;
      internal?: boolean;
      text: string;
    };
    Metadata: {
      /** Format: iri-reference */
      shipment?: string;
      key?: string;
      value?: string;
    };
    PhoneNumber: {
      /**
       * @description The country calling code for this number, as defined by the International Telecommunication Union
       * (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
       */
      countryCode?: number;
      /**
       * @description National (significant) Number is defined in International Telecommunication Union (ITU)
       * Recommendation E.164. It is a language/country-neutral representation of a phone number at a
       * country level. For countries which have the concept of an "area code" or "national destination
       * code", this is included in the National (significant) Number. Although the ITU says the maximum
       * length should be 15, we have found longer numbers in some countries e.g. Germany.
       */
      nationalNumber?: string;
      /**
       * @description Extension is not standardized in ITU recommendations, except for being defined as a series of
       * numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for the
       * possible use of a leading zero in the extension (organizations have complete freedom to do so,
       * as there is no standard defined). However, only ASCII digits should be stored here.
       */
      extension?: string;
      /**
       * @description In some countries, the national (significant) number starts with one or more "0"s without this
       * being a national prefix or trunk code of some kind. For example, the leading zero in the national
       * (significant) number of an Italian phone number indicates the number is a fixed-line number.
       */
      italianLeadingZero?: boolean;
      /**
       * @description This field is used to store the raw input string containing phone numbers before it was
       * canonicalized by the library. For example, it could be used to store alphanumerical numbers
       * such as "1-800-GOOG-411".
       */
      rawInput?: string;
      /**
       * @description The source from which the country_code is derived. This is not set in the general parsing method,
       * but in the method that parses and keeps raw_input. New fields could be added upon request.
       * @example 4
       */
      countryCodeSource?: number;
      /**
       * @description The carrier selection code that is preferred when calling this phone number domestically. This
       * also includes codes that need to be dialed in some countries when calling from landlines to
       * mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone number
       * itself when calling from a mobile phone to a domestic landline phone and vice versa.
       */
      preferredDomesticCarrierCode?: string;
      /** @description Whether this phone number has a number of leading zeros set. */
      hasNumberOfLeadingZeros?: boolean;
      /**
       * @description The number of leading zeros of this phone number.
       * @example 1
       */
      numberOfLeadingZeros?: number;
    };
    "PhoneNumber-address_book-collection-read": Record<string, never>;
    "PhoneNumber-address_book-item-read": Record<string, never>;
    "PhoneNumber-shipment-item-read": Record<string, never>;
    "PhoneNumber-shipment-quotation-item-read": Record<string, never>;
    "PhoneNumber-shipment-write": Record<string, never>;
    "PhoneNumber-transport-driver-collection-read": Record<string, never>;
    "PhoneNumber-transport-driver-collection-write": Record<string, never>;
    "PhoneNumber-transport-driver-item-read": Record<string, never>;
    "PhoneNumber-transport-driver-item-write": Record<string, never>;
    "PhoneNumber-transport-route-collection-read": Record<string, never>;
    "PhoneNumber-transport-route-item-read": Record<string, never>;
    "PhoneNumber-transport-route_collection-item-read": Record<string, never>;
    "PhoneNumber-transport-step-collection-read": Record<string, never>;
    "PhoneNumber-transport-task-collection-read": Record<string, never>;
    "PhoneNumber-transport-task-collection-read_transport-task_label-collection-read": Record<string, never>;
    "PhoneNumber-transport-task-item-read": Record<string, never>;
    "PhoneNumber-transport-vehicle-collection-read": Record<string, never>;
    "PhoneNumber-transport-vehicle-collection-write": Record<string, never>;
    "PhoneNumber-transport-vehicle-item-read": Record<string, never>;
    "PhoneNumber-transport-vehicle-item-write": Record<string, never>;
    "Pickup-transport-pickup-collection-read": {
      addressBookItem: components["schemas"]["AddressBookItems-transport-pickup-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup-collection-read"];
      relation?: components["schemas"]["Relation-transport-pickup-collection-read"];
      depots?: components["schemas"]["Depot-transport-pickup-collection-read"][];
    };
    "Pickup-transport-pickup-item-read": {
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup-item-read"];
      relation?: components["schemas"]["Relation-transport-pickup-item-read"];
      depots?: string[];
      /** Format: uuid */
      id?: string;
    };
    "Pickup-transport-unassigned-item-read": {
      addressBookItem: components["schemas"]["AddressBookItems-transport-unassigned-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-unassigned-item-read"];
      relation?: components["schemas"]["Relation-transport-unassigned-item-read"];
      depots?: components["schemas"]["Depot-transport-unassigned-item-read"][];
      /** Format: uuid */
      id?: string;
    };
    PickupPoint: {
      identifier?: string;
      distributorCode?: string;
      name?: string;
      country?: string;
      postcode?: string;
      city?: string;
      street?: string;
      number?: string;
      addressLine1?: string;
      formattedAddress?: string;
    };
    "PickupPoint-shipment-item-read": {
      identifier?: string;
      distributorCode?: string;
      name?: string;
      country?: string;
      postcode?: string;
      city?: string;
      street?: string;
      number?: string;
    };
    "PickupPoint-shipment-write": {
      identifier?: string;
      distributorCode?: string;
      name?: string;
      country?: string;
      postcode?: string;
      city?: string;
      street?: string;
      number?: string;
    };
    "PickupRequest-pickup_request-collection-read": {
      relation: components["schemas"]["Relation-pickup_request-collection-read"];
      user?: components["schemas"]["User-pickup_request-collection-read"];
      /** Format: iri-reference */
      distributor: string;
      pickupAddress: components["schemas"]["AddressBookItems-pickup_request-collection-read"];
      /** Format: date-time */
      pickupAt: string;
      /** @description The quantity of items inserted by the user through manual pickup request. */
      quantity: number;
      /** Format: iri-reference */
      pickup?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "PickupRequest-pickup_request-collection-write": {
      /** Format: iri-reference */
      relation: string;
      /** Format: iri-reference */
      user?: string;
      /** Format: iri-reference */
      distributor: string;
      /** Format: iri-reference */
      pickupAddress: string;
      /** Format: date-time */
      pickupAt: string;
      /** @description The quantity of items inserted by the user through manual pickup request. */
      quantity: number;
      /** Format: iri-reference */
      pickup?: string;
    };
    "PickupRequest-pickup_request-item-read": {
      /** Format: iri-reference */
      relation: string;
      /** Format: iri-reference */
      user?: string;
      /** Format: iri-reference */
      distributor: string;
      /** Format: iri-reference */
      pickupAddress: string;
      /** Format: date-time */
      pickupAt: string;
      /** @description The quantity of items inserted by the user through manual pickup request. */
      quantity: number;
      /** Format: iri-reference */
      pickup?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "PickupRequest-pickup_request-item-write": {
      /** Format: iri-reference */
      relation: string;
      /** Format: iri-reference */
      user?: string;
      /** Format: iri-reference */
      distributor: string;
      /** Format: iri-reference */
      pickupAddress: string;
      /** Format: date-time */
      pickupAt: string;
      /** @description The quantity of items inserted by the user through manual pickup request. */
      quantity: number;
      /** Format: iri-reference */
      pickup?: string;
    };
    PickupSchedule: {
      instructions?: string;
      active?: boolean;
      days?: string[];
      vehicles?: string[];
      arriveEmpty?: boolean;
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      /** Format: iri-reference */
      relation?: string;
      depots?: string[];
      transportTasks?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "PickupSchedule-transport-pickup_schedule-collection-read": {
      instructions?: string;
      active?: boolean;
      days?: string[];
      vehicles?: components["schemas"]["Vehicle-transport-pickup_schedule-collection-read"][];
      arriveEmpty?: boolean;
      addressBookItem: components["schemas"]["AddressBookItems-transport-pickup_schedule-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup_schedule-collection-read"];
      relation?: components["schemas"]["Relation-transport-pickup_schedule-collection-read"];
      depots?: components["schemas"]["Depot-transport-pickup_schedule-collection-read"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "PickupSchedule-transport-pickup_schedule-collection-write": {
      instructions?: string;
      active?: boolean;
      days?: string[];
      vehicles?: string[];
      arriveEmpty?: boolean;
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup_schedule-collection-write"];
      /** Format: iri-reference */
      relation?: string;
      depots?: string[];
    };
    "PickupSchedule-transport-pickup_schedule-item-read": {
      instructions?: string;
      active?: boolean;
      days?: string[];
      vehicles?: string[];
      arriveEmpty?: boolean;
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup_schedule-item-read"];
      relation?: components["schemas"]["Relation-transport-pickup_schedule-item-read"];
      depots?: components["schemas"]["Depot-transport-pickup_schedule-item-read"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "PickupSchedule-transport-pickup_schedule-item-write": {
      instructions?: string;
      active?: boolean;
      days?: string[];
      vehicles?: string[];
      arriveEmpty?: boolean;
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-pickup_schedule-item-write"];
      /** Format: iri-reference */
      relation?: string;
      depots?: string[];
    };
    Point: {
      /** @description The X coordinate or the longitude. */
      x?: number;
      /** @description The Y coordinate or the latitude. */
      y?: number;
      /** @description Spatial Reference System Identifier. */
      srid?: number;
      /** @description Latitude getter. */
      latitude?: number;
      /** @description Longitude getter. */
      longitude?: number;
      /** @description Type getter. */
      type?: string;
    };
    "Point-firebase.transport-position.write": Record<string, never>;
    "Point-pickup_request-collection-read": Record<string, never>;
    "Point-shipment-collection-read": Record<string, never>;
    "Point-transport-depot-collection-read": Record<string, never>;
    "Point-transport-depot-collection-write": Record<string, never>;
    "Point-transport-depot-item-read": Record<string, never>;
    "Point-transport-depot-item-write": Record<string, never>;
    "Point-transport-pickup_schedule-collection-read": Record<string, never>;
    "Point-transport-route-item-read": Record<string, never>;
    "Point-transport-step-collection-read": Record<string, never>;
    "Point-transport-task-collection-read": Record<string, never>;
    "Point-transport-task-collection-read_transport-task_label-collection-read": Record<string, never>;
    "Point-transport-task-item-read": Record<string, never>;
    "Position-firebase.transport-position.write": {
      /** Format: iri-reference */
      vehicle?: string;
      /** Format: iri-reference */
      route?: string;
      locationDetails?: components["schemas"]["LocationDetails-firebase.transport-position.write"];
      /** Format: uuid */
      id?: string;
    };
    "Postcode-Api.BuzziePostcode": {
      postcode: number;
    };
    "Postcode-transport-postcode-collection-read": {
      region?: components["schemas"]["Region-transport-postcode-collection-read"];
      postcode: number;
      enabled?: boolean;
      preferCar?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Postcode-transport-postcode-collection-write": {
      /** Format: iri-reference */
      region?: string;
      postcode: number;
      enabled?: boolean;
      preferCar?: boolean;
    };
    "Postcode-transport-postcode-item-read": {
      region?: components["schemas"]["Region-transport-postcode-item-read"];
      postcode: number;
      enabled?: boolean;
      preferCar?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Postcode-transport-postcode-item-write": {
      region?: components["schemas"]["Region-transport-postcode-item-write"];
      postcode: number;
      enabled?: boolean;
      preferCar?: boolean;
    };
    PriceRules: {
      /** Format: iri-reference */
      relation?: string;
      /** Format: iri-reference */
      surchargeSet?: string;
      description: string;
      type?: string;
      discountType: string;
      discountPercentage?: number;
      fixedPrice?: number;
      conditions: string;
      /** Format: date-time */
      activeFrom?: string;
      /** Format: date-time */
      activeUntil?: string;
      internalRemark?: string;
      expressionRule?: components["schemas"]["ExpressionRule"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      conditionsAsObject?: string;
      discountTypes?: Record<string, never>;
      discountPercentageType?: boolean;
      fixedPriceType?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    PrintProfile: {
      /** Format: iri-reference */
      relation?: string;
      description?: string;
      amountPerPage?: number;
      margins?: number;
      userDefaults?: string[];
      printers?: components["schemas"]["Printer"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Printer: {
      /** Format: iri-reference */
      relation?: string;
      printProfile?: components["schemas"]["PrintProfile"];
      printNodeId?: number;
      computer?: string;
      name?: string;
      userDefaults?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    RateInterface: {
      idAsString?: string;
      type?: string;
      /** Format: uuid */
      pricelistId?: string;
      /** Format: iri-reference */
      distributor?: string;
      /** Format: iri-reference */
      service?: string;
      price?: number;
      priceIncl?: number;
      tax?: number;
      vat?: components["schemas"]["Vat"];
      basePrice?: number;
      basePriceIncl?: number;
      baseTaxPrice?: number;
      totalPrice?: number;
      totalTax?: number;
      totalPriceIncl?: number;
      surcharges?: components["schemas"]["RateSurchargeInterface"][];
      nonManualSurcharges?: readonly components["schemas"]["RateSurchargeInterface"][];
      manualSurcharges?: readonly components["schemas"]["RateSurchargeInterface"][];
      energySurcharge?: components["schemas"]["RateSurchargeInterface"];
      description?: string;
      remark?: string;
      priceRule?: components["schemas"]["PriceRules"];
      processingDays?: string;
      /** Format: date-time */
      expectedDelivery?: string;
      departures?: string[];
      departuresAsString?: string;
      onRequest?: boolean;
      manual?: boolean;
      /** Format: iri-reference */
      user?: string;
      subject?: components["schemas"]["ShipmentInterface"];
    };
    RateSurchargeInterface: {
      rate?: components["schemas"]["RateInterface"];
      price?: number;
      vat?: components["schemas"]["Vat"];
      priceIncl?: number;
      tax?: number;
      description?: string[];
      /** Format: iri-reference */
      surchargeSet?: string;
      surcharge?: components["schemas"]["Surcharge"];
      insurance?: boolean;
      energy?: boolean;
      onRequest?: boolean;
    };
    "RecomputeType-transport-task-collection-read_transport-task_label-collection-read": Record<string, never>;
    RedirectUri: Record<string, never>;
    Referral: {
      /** Format: iri-reference */
      relation: string;
      code: string;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      /** Format: duration */
      expiresAfter?: string;
      remark?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Region: {
      name: string;
      depot?: components["schemas"]["Depot"];
      postcodes?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Region-transport-postcode-collection-read": {
      name: string;
    };
    "Region-transport-postcode-item-read": {
      name: string;
    };
    "Region-transport-postcode-item-write": {
      name: string;
    };
    "Region-transport-region-collection-read": {
      name: string;
      depot?: components["schemas"]["Depot-transport-region-collection-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Region-transport-region-collection-write": {
      name: string;
      /** Format: iri-reference */
      depot?: string;
    };
    "Region-transport-region-item-read": {
      name: string;
      depot?: components["schemas"]["Depot-transport-region-item-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Region-transport-route_collection-collection-read": {
      name: string;
      /** Format: uuid */
      id?: string;
    };
    "Relation-pickup_request-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-relation-collection-read": {
      name: string;
      number?: string;
      /** Format: uuid */
      id?: string;
    };
    "Relation-relation-item-read": {
      name: string;
      number?: string;
      /** Format: uuid */
      id?: string;
      /** Format: iri-reference */
      conversation?: string;
    };
    "Relation-shipment-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-pickup-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-pickup-item-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-pickup_schedule-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-pickup_schedule-item-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-route_collection-item-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-task-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-task-collection-read_transport-task_label-collection-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-task-item-read": {
      name: string;
      number?: string;
    };
    "Relation-transport-unassigned-item-read": {
      name: string;
      number?: string;
      /** Format: uuid */
      id?: string;
    };
    "Relation-transport-warehouse_waybill_info-read": {
      name: string;
      number?: string;
      /** Format: uuid */
      id?: string;
    };
    "Relation-user-item-read": {
      /** Format: uuid */
      id?: string;
    };
    Route: {
      /** Format: iri-reference */
      collection?: string;
      sequence?: number;
      /** Format: iri-reference */
      vehicle?: string;
      /** Format: iri-reference */
      driver?: string;
      /** Format: iri-reference */
      coDriver?: string;
      steps?: string[];
      summary?: components["schemas"]["Summary"];
      timeWindow?: components["schemas"]["TimeWindow"];
      geometry?: string;
      /** Format: date-time */
      syncedAt?: string;
      chute?: number;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Route-shipment-collection-read": {
      collection?: components["schemas"]["RouteCollection-shipment-collection-read"];
      sequence?: number;
    };
    "Route-transport-route-collection-read": {
      /** Format: iri-reference */
      collection?: string;
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-route-collection-read"];
      driver?: components["schemas"]["Driver-transport-route-collection-read"];
      coDriver?: components["schemas"]["Driver-transport-route-collection-read"];
      geometry?: string;
      /** Format: date-time */
      syncedAt?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Route-transport-route-item-read": {
      collection?: components["schemas"]["RouteCollection-transport-route-item-read"];
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-route-item-read"];
      driver?: components["schemas"]["Driver-transport-route-item-read"];
      coDriver?: components["schemas"]["Driver-transport-route-item-read"];
      steps?: components["schemas"]["Step-transport-route-item-read"][];
      summary?: components["schemas"]["Summary-transport-route-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-route-item-read"];
      geometry?: string;
      /** Format: date-time */
      syncedAt?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Route-transport-route-item-write": {
      sequence?: number;
      /** Format: iri-reference */
      driver?: string;
      /** Format: iri-reference */
      coDriver?: string;
      steps?: components["schemas"]["Step-transport-route-item-write"][];
    };
    "Route-transport-route_collection-item-read": {
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-route_collection-item-read"];
      driver?: components["schemas"]["Driver-transport-route_collection-item-read"];
      coDriver?: components["schemas"]["Driver-transport-route_collection-item-read"];
      summary?: components["schemas"]["Summary-transport-route_collection-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection-item-read"];
      geometry?: string;
      /** Format: date-time */
      syncedAt?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Route-transport-task-collection-read": {
      collection?: components["schemas"]["RouteCollection-transport-task-collection-read"];
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-task-collection-read"];
      /** Format: iri-reference */
      driver?: string;
      /** Format: iri-reference */
      coDriver?: string;
      /** Format: uuid */
      id?: string;
    };
    "Route-transport-task-collection-read_transport-task_label-collection-read": {
      collection?: components["schemas"]["RouteCollection-transport-task-collection-read_transport-task_label-collection-read"];
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-task-collection-read_transport-task_label-collection-read"];
      /** Format: iri-reference */
      driver?: string;
      /** Format: iri-reference */
      coDriver?: string;
      /** Format: uuid */
      id?: string;
    };
    "Route-transport-task-item-read": {
      collection?: components["schemas"]["RouteCollection-transport-task-item-read"];
      sequence?: number;
      vehicle?: components["schemas"]["Vehicle-transport-task-item-read"];
      /** Format: uuid */
      id?: string;
    };
    "RouteCollection-shipment-collection-read": {
      /** Format: date-time */
      date: string;
    };
    "RouteCollection-transport-route-item-read": {
      /**
       * @default new
       * @example new
       */
      status?: string;
    };
    "RouteCollection-transport-route_collection-collection-read": {
      /**
       * @default new
       * @example new
       */
      status?: string;
      description?: string;
      depot?: components["schemas"]["Depot-transport-route_collection-collection-read"];
      /** Format: date-time */
      date: string;
      routeCollectionBulks?: components["schemas"]["RouteCollectionBulk-transport-route_collection-collection-read"][];
      routeCollectionVehicles?: components["schemas"]["RouteCollectionVehicle-transport-route_collection-collection-read"][];
      taskExclusions?: string[];
      vehicleTypes?: string[];
      requireInbound?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      region?: components["schemas"]["Region-transport-route_collection-collection-read"];
    };
    "RouteCollection-transport-route_collection-collection-write": {
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      /** Format: date-time */
      date: string;
      routeCollectionBulks?: components["schemas"]["RouteCollectionBulk-transport-route_collection-collection-write"][];
      routeCollectionVehicles?: components["schemas"]["RouteCollectionVehicle-transport-route_collection-collection-write"][];
      taskExclusions?: string[];
      vehicleTypes?: string[];
      requireInbound?: boolean;
    };
    "RouteCollection-transport-route_collection-item-read": {
      /**
       * @default new
       * @example new
       */
      status?: string;
      description?: string;
      depot?: components["schemas"]["Depot-transport-route_collection-item-read"];
      /** Format: date-time */
      date: string;
      unassigned?: string[];
      routes?: components["schemas"]["Route-transport-route_collection-item-read"][];
      summary?: components["schemas"]["Summary-transport-route_collection-item-read"];
      computingTimes?: components["schemas"]["ComputingTimes-transport-route_collection-item-read"];
      routeCollectionBulks?: components["schemas"]["RouteCollectionBulk-transport-route_collection-item-read"][];
      routeCollectionVehicles?: components["schemas"]["RouteCollectionVehicle-transport-route_collection-item-read"][];
      taskExclusions?: string[];
      vehicleTypes?: string[];
      error?: string;
      requireInbound?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: iri-reference */
      region?: string;
    };
    "RouteCollection-transport-route_collection-item-write": {
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      /** Format: date-time */
      date: string;
      summary?: components["schemas"]["Summary-transport-route_collection-item-write"];
      computingTimes?: components["schemas"]["ComputingTimes-transport-route_collection-item-write"];
      routeCollectionBulks?: components["schemas"]["RouteCollectionBulk-transport-route_collection-item-write"][];
      routeCollectionVehicles?: components["schemas"]["RouteCollectionVehicle-transport-route_collection-item-write"][];
      taskExclusions?: string[];
      vehicleTypes?: string[];
      requireInbound?: boolean;
    };
    "RouteCollection-transport-task-collection-read": {
      /** Format: date-time */
      date: string;
      /** Format: uuid */
      id?: string;
    };
    "RouteCollection-transport-task-collection-read_transport-task_label-collection-read": {
      /** Format: date-time */
      date: string;
      /** Format: uuid */
      id?: string;
    };
    "RouteCollection-transport-task-item-read": {
      /** Format: date-time */
      date: string;
      /** Format: uuid */
      id?: string;
    };
    RouteCollectionBulk: {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "RouteCollectionBulk-transport-route_collection-collection-read": {
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
    };
    "RouteCollectionBulk-transport-route_collection-collection-write": {
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
    };
    "RouteCollectionBulk-transport-route_collection-item-read": {
      bulkShipment?: components["schemas"]["BulkShipment-transport-route_collection-item-read"];
      priority?: string;
      /** Format: uuid */
      id?: string;
    };
    "RouteCollectionBulk-transport-route_collection-item-write": {
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
    };
    "RouteCollectionBulk-transport-route_collection_bulk-collection-read": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "RouteCollectionBulk-transport-route_collection_bulk-item-read": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "RouteCollectionBulk-transport-route_collection_bulk-item-write": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      bulkShipment?: string;
      priority?: string;
    };
    RouteCollectionVehicle: {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      skillShipment?: boolean;
      skillPickup?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "RouteCollectionVehicle-transport-route_collection-collection-read": {
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection-collection-read"];
      skillShipment?: boolean;
      skillPickup?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "RouteCollectionVehicle-transport-route_collection-collection-write": {
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection-collection-write"];
      skillShipment?: boolean;
      skillPickup?: boolean;
    };
    "RouteCollectionVehicle-transport-route_collection-item-read": {
      vehicle?: components["schemas"]["Vehicle-transport-route_collection-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection-item-read"];
      skillShipment?: boolean;
      skillPickup?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "RouteCollectionVehicle-transport-route_collection-item-write": {
      routeCollection?: components["schemas"]["RouteCollection-transport-route_collection-item-write"];
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection-item-write"];
      skillShipment?: boolean;
      skillPickup?: boolean;
    };
    "RouteCollectionVehicle-transport-route_collection_vehicle-collection-read": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection_vehicle-collection-read"];
      skillShipment?: boolean;
      skillPickup?: boolean;
      /** Format: uuid */
      id?: string;
    };
    "RouteCollectionVehicle-transport-route_collection_vehicle-item-read": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection_vehicle-item-read"];
      skillShipment?: boolean;
      skillPickup?: boolean;
      /** Format: uuid */
      id?: string;
    };
    "RouteCollectionVehicle-transport-route_collection_vehicle-item-write": {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      vehicle?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route_collection_vehicle-item-write"];
      skillShipment?: boolean;
      skillPickup?: boolean;
    };
    "ScanInbound-ScanInbound.Read": {
      /** Format: iri-reference */
      depot: string;
      dimensions?: components["schemas"]["Dimensions-ScanInbound.Read"];
      /** @description gram */
      weight?: number;
      /** Format: uuid */
      id?: string;
      label?: components["schemas"]["Label-ScanInbound.Read"];
      /** Format: date-time */
      datetime?: string;
    };
    "ScanInbound-ScanInbound.Write": {
      /** Format: iri-reference */
      depot: string;
      dimensions?: components["schemas"]["Dimensions-ScanInbound.Write"];
      /** @description gram */
      weight?: number;
      data: string;
    };
    Scope: Record<string, never>;
    "Service-ScanInbound.Read": {
      distributor: components["schemas"]["Distributor-ScanInbound.Read"];
      name?: string;
    };
    "Service-matrix-group-item-read": {
      key?: string;
      name?: string;
      /** Format: uuid */
      id?: string;
      pickupPoint?: boolean;
      distributorIdentifier?: string;
    };
    "Service-matrix-group-read": {
      key?: string;
      name?: string;
      /** Format: uuid */
      id?: string;
      pickupPoint?: boolean;
      distributorIdentifier?: string;
    };
    "Service-matrix-item-read": {
      key?: string;
      name?: string;
      /** Format: uuid */
      id?: string;
      pickupPoint?: boolean;
      distributorIdentifier?: string;
    };
    "Service-matrix-read": {
      key?: string;
      name?: string;
      /** Format: uuid */
      id?: string;
      pickupPoint?: boolean;
      distributorIdentifier?: string;
    };
    "Service-service-item-read": {
      defaultInsuredValue?: number;
      /** Format: uuid */
      id?: string;
    };
    "Service-shipment-quotation-item-read": {
      key?: string;
      name?: string;
      /** Format: uuid */
      id?: string;
      pickupPoint?: boolean;
      distributorIdentifier?: string;
    };
    ShipFrom: {
      contact?: components["schemas"]["Contact"];
      address?: components["schemas"]["Address"];
      country?: string;
    };
    "ShipFrom-shipment-collection-read": {
      address?: components["schemas"]["Address-shipment-collection-read"];
    };
    "ShipFrom-shipment-item-read": {
      contact?: components["schemas"]["Contact-shipment-item-read"];
      address?: components["schemas"]["Address-shipment-item-read"];
    };
    "ShipFrom-shipment-quotation-item-read": {
      contact?: components["schemas"]["Contact-shipment-quotation-item-read"];
      address?: components["schemas"]["Address-shipment-quotation-item-read"];
    };
    "ShipFrom-shipment-write": {
      contact?: components["schemas"]["Contact-shipment-write"];
      address?: components["schemas"]["Address-shipment-write"];
    };
    "ShipFrom-transport-task-item-read": {
      contact?: components["schemas"]["Contact-transport-task-item-read"];
      address?: components["schemas"]["Address-transport-task-item-read"];
    };
    "ShipFrom-transport-unassigned-item-read": {
      contact?: components["schemas"]["Contact-transport-unassigned-item-read"];
      address?: components["schemas"]["Address-transport-unassigned-item-read"];
    };
    ShipTo: {
      contact?: components["schemas"]["Contact"];
      address?: components["schemas"]["Address"];
      country?: string;
    };
    "ShipTo-ScanInbound.Read": {
      address?: components["schemas"]["Address-ScanInbound.Read"];
    };
    "ShipTo-shipment-collection-read": {
      address?: components["schemas"]["Address-shipment-collection-read"];
    };
    "ShipTo-shipment-item-read": {
      contact?: components["schemas"]["Contact-shipment-item-read"];
      address?: components["schemas"]["Address-shipment-item-read"];
    };
    "ShipTo-shipment-quotation-item-read": {
      contact?: components["schemas"]["Contact-shipment-quotation-item-read"];
      address?: components["schemas"]["Address-shipment-quotation-item-read"];
    };
    "ShipTo-shipment-write": {
      contact?: components["schemas"]["Contact-shipment-write"];
      address?: components["schemas"]["Address-shipment-write"];
    };
    "ShipTo-transport-task-collection-read_transport-task_label-collection-read": Record<string, never>;
    "ShipTo-transport-task-item-read": {
      contact?: components["schemas"]["Contact-transport-task-item-read"];
      address?: components["schemas"]["Address-transport-task-item-read"];
    };
    "ShipTo-transport-unassigned-item-read": {
      contact?: components["schemas"]["Contact-transport-unassigned-item-read"];
      address?: components["schemas"]["Address-transport-unassigned-item-read"];
    };
    "ShipTo-transport-warehouse_waybill_info-read": {
      contact?: components["schemas"]["Contact-transport-warehouse_waybill_info-read"];
      address?: components["schemas"]["Address-transport-warehouse_waybill_info-read"];
    };
    Shipment: {
      /** Format: date-time */
      createdAt?: string;
      purchaseInvoiceMatchingStatus?: string;
      purchaseInvoiceMatchingReference?: string;
      /** Format: iri-reference */
      shipmentQuotation?: string;
      manifest?: components["schemas"]["ShipmentManifest"];
      items?: string[];
      metadata?: readonly components["schemas"]["Metadata"][];
      contact?: components["schemas"]["Contact"];
      pickupPoint?: components["schemas"]["PickupPoint"];
      description?: string;
      invoiceReference?: string;
      labels?: string[];
      commercialInvoice?: components["schemas"]["CommercialInvoice"];
      options?: components["schemas"]["ShipmentSurchargeSet"][];
      rates?: readonly components["schemas"]["ShipmentRate"][];
      purchaseRate?: components["schemas"]["RateInterface"];
      salesRate?: components["schemas"]["ShipmentRate"];
      /** Format: date-time */
      confirmationSentAt?: string;
      /** Format: date-time */
      deliveryConfirmationSentAt?: string;
      /** Format: date-time */
      deliveredAt?: string;
      dispute?: boolean;
      /** Format: date-time */
      nextTrackingUpdate?: string;
      paymentMethod?: string;
      tasks?: readonly components["schemas"]["ShipmentTask"][];
      distributorReference?: string;
      invoicable?: boolean;
      /** Format: iri-reference */
      bulk?: string;
      client?: components["schemas"]["Client"];
      /** Format: iri-reference */
      externalOrder?: string;
      conversations?: readonly string[];
      /** Format: iri-reference */
      integration?: string;
      /** Format: iri-reference */
      related?: string;
      relatedShipments?: readonly string[];
      invoices?: readonly components["schemas"]["Invoice"][];
      /** Format: iri-reference */
      vehicle?: string;
      transportSteps?: readonly string[];
      fulfilment?: components["schemas"]["Fulfilment"];
      archivedLabel?: boolean;
      /**
       * Format: iri-reference
       * @description Pickup request to be able to delete pickup request if shipment gets canceled.
       */
      pickupRequest?: string;
      brand?: components["schemas"]["Brand"];
      shipmentEmails?: readonly components["schemas"]["ShipmentEmail"][];
      customsInformationContents?: components["schemas"]["CustomsInformationContents"];
      /** @description Field represents invoiceNumber for customs (outside eu shipments). */
      customsInvoiceNumber?: string;
      /**
       * @default new
       * @example new
       */
      status?: string;
      sequence?: string;
      /** Format: iri-reference */
      relation?: string;
      /** Format: iri-reference */
      user?: string;
      /** Format: iri-reference */
      adminUser?: string;
      transportType?: components["schemas"]["TransportType"];
      /** Format: iri-reference */
      distributor?: string;
      /** Format: iri-reference */
      service?: string;
      shipFrom?: components["schemas"]["ShipFrom"];
      /** Format: iri-reference */
      shipFromAddressBookItem?: string;
      /** Format: iri-reference */
      shipToAddressBookItem?: string;
      shipTo?: components["schemas"]["ShipTo"];
      dispatch?: components["schemas"]["Dispatch"];
      delivery?: components["schemas"]["Delivery"];
      incoTerms?: string;
      insurance?: components["schemas"]["Insurance"];
      flagged?: boolean;
      flaggedManual?: boolean;
      /** Format: date-time */
      snoozeUntil?: string;
      draft?: boolean;
      internalRemark?: string;
      flow?: string;
      dpdCustomerNumber?: string;
      dpdDepotCode?: string;
      dpdPickupBy?: string;
      dpdPickupType?: string;
      duplicated?: boolean;
      referral?: components["schemas"]["Referral"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      updatedAt?: string;
      archived?: boolean;
      relationPaths?: readonly string[];
      confirmationSent?: boolean;
      deliveryConfirmationSent?: boolean;
      trackings?: readonly string[];
      surchargeSets?: readonly components["schemas"]["ShipmentSurchargeSet"][];
      labelAvailable?: boolean;
      payableAmount?: number;
      payableDescription?: string;
      editable?: boolean;
      /** Format: iri-reference */
      conversation?: string;
      eoriNumber?: Record<string, never>;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
      flattenShipmentItems?: readonly string[];
      totalWeight?: number;
      totalItems?: number;
      totalVolume?: number;
      totalLoadingMeters?: number;
      totalValue?: number;
      export?: boolean;
      import?: boolean;
      domestic?: boolean;
      exportToOutsideOfEU?: boolean;
      importFromOutsideOfEU?: boolean;
      purchaseRates?: readonly components["schemas"]["RateInterface"][];
      salesRates?: readonly components["schemas"]["RateInterface"][];
      genericFlow?: boolean;
      dPDFlow?: boolean;
      b2CFlow?: boolean;
      versionV2?: boolean;
    };
    "Shipment-ScanInbound.Read": {
      salesRate?: components["schemas"]["ShipmentRate-ScanInbound.Read"];
      sequence?: string;
      shipTo?: components["schemas"]["ShipTo-ScanInbound.Read"];
    };
    "Shipment-conversation-read": {
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "Shipment-shipment-collection-read": {
      bulk?: components["schemas"]["BulkShipment-shipment-collection-read"];
      vehicle?: components["schemas"]["Vehicle-shipment-collection-read"];
      transportSteps?: readonly components["schemas"]["Step-shipment-collection-read"][];
      /**
       * @default new
       * @example new
       */
      status?: string;
      relation?: components["schemas"]["Relation-shipment-collection-read"];
      shipFrom?: components["schemas"]["ShipFrom-shipment-collection-read"];
      shipTo?: components["schemas"]["ShipTo-shipment-collection-read"];
      dispatch?: components["schemas"]["Dispatch-shipment-collection-read"];
      delivery?: components["schemas"]["Delivery-shipment-collection-read"];
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "Shipment-shipment-item-read": {
      /** Format: date-time */
      createdAt?: string;
      items?: components["schemas"]["Item-shipment-item-read"][];
      pickupPoint?: components["schemas"]["PickupPoint-shipment-item-read"];
      invoiceReference?: string;
      labels?: components["schemas"]["Label-shipment-item-read"][];
      options?: components["schemas"]["ShipmentSurchargeSet-shipment-item-read"][];
      fulfilment?: components["schemas"]["Fulfilment-shipment-item-read"];
      /**
       * @default new
       * @example new
       */
      status?: string;
      transportType?: components["schemas"]["TransportType-shipment-item-read"];
      /** Format: iri-reference */
      service?: string;
      shipFrom?: components["schemas"]["ShipFrom-shipment-item-read"];
      shipTo?: components["schemas"]["ShipTo-shipment-item-read"];
      dispatch?: components["schemas"]["Dispatch-shipment-item-read"];
      delivery?: components["schemas"]["Delivery-shipment-item-read"];
      incoTerms?: string;
      insurance?: components["schemas"]["Insurance-shipment-item-read"];
      draft?: boolean;
      dpdCustomerNumber?: string;
      dpdDepotCode?: string;
      /** Format: uuid */
      id?: string;
      conversation?: components["schemas"]["Conversation-shipment-item-read"];
      sequence?: string;
    };
    "Shipment-shipment-quotation-item-read": {
      /**
       * @default new
       * @example new
       */
      status?: string;
      transportType?: components["schemas"]["TransportType-shipment-quotation-item-read"];
      service?: components["schemas"]["Service-shipment-quotation-item-read"];
      shipFrom?: components["schemas"]["ShipFrom-shipment-quotation-item-read"];
      shipTo?: components["schemas"]["ShipTo-shipment-quotation-item-read"];
      dispatch?: components["schemas"]["Dispatch-shipment-quotation-item-read"];
      delivery?: components["schemas"]["Delivery-shipment-quotation-item-read"];
      sequence?: string;
    };
    "Shipment-shipment-write": {
      items?: components["schemas"]["Item-shipment-write"][];
      pickupPoint?: components["schemas"]["PickupPoint-shipment-write"];
      invoiceReference?: string;
      labels?: string[];
      options?: components["schemas"]["ShipmentSurchargeSet-shipment-write"][];
      related?: components["schemas"]["Shipment-shipment-write"];
      fulfilment?: components["schemas"]["Fulfilment-shipment-write"];
      transportType?: components["schemas"]["TransportType-shipment-write"];
      /** Format: iri-reference */
      service?: string;
      shipFrom?: components["schemas"]["ShipFrom-shipment-write"];
      shipTo?: components["schemas"]["ShipTo-shipment-write"];
      dispatch?: components["schemas"]["Dispatch-shipment-write"];
      delivery?: components["schemas"]["Delivery-shipment-write"];
      incoTerms?: string;
      insurance?: components["schemas"]["Insurance-shipment-write"];
      draft?: boolean;
      dpdCustomerNumber?: string;
      dpdDepotCode?: string;
    };
    "Shipment-transport-route-item-read": {
      /**
       * @default new
       * @example new
       */
      status?: string;
    };
    "Shipment-transport-task-collection-read_transport-task_label-collection-read": {
      /** Format: iri-reference */
      bulk?: string;
      /**
       * @default new
       * @example new
       */
      status?: string;
      shipTo?: components["schemas"]["ShipTo-transport-task-collection-read_transport-task_label-collection-read"];
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "Shipment-transport-task-item-read": {
      shipFrom?: components["schemas"]["ShipFrom-transport-task-item-read"];
      shipTo?: components["schemas"]["ShipTo-transport-task-item-read"];
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "Shipment-transport-unassigned-item-read": {
      bulk?: components["schemas"]["BulkShipment-transport-unassigned-item-read"];
      vehicle?: components["schemas"]["Vehicle-transport-unassigned-item-read"];
      shipFrom?: components["schemas"]["ShipFrom-transport-unassigned-item-read"];
      shipTo?: components["schemas"]["ShipTo-transport-unassigned-item-read"];
      dispatch?: components["schemas"]["Dispatch-transport-unassigned-item-read"];
      delivery?: components["schemas"]["Delivery-transport-unassigned-item-read"];
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "Shipment-transport-warehouse_waybill_info-read": {
      fulfilment?: components["schemas"]["Fulfilment-transport-warehouse_waybill_info-read"];
      relation?: components["schemas"]["Relation-transport-warehouse_waybill_info-read"];
      shipTo?: components["schemas"]["ShipTo-transport-warehouse_waybill_info-read"];
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    ShipmentEmail: {
      /** Format: iri-reference */
      shipment?: string;
      type?: components["schemas"]["ShipmentEmailType"];
      /** Format: date-time */
      sendAt?: string;
      sendBy?: string;
      sendTo?: string[];
      errors?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    ShipmentEmailType: {
      name?: string;
      value?: string;
      trackingEmailClass?: string;
      trackingEmailTemplate?: string;
      displayValue?: string;
    };
    ShipmentInterface: {
      createdAt?: Record<string, never>;
      updatedAt?: Record<string, never>;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      items?: components["schemas"]["ShipmentItemInterface"][];
      /** Format: iri-reference */
      relation?: string;
      surchargeSets?: components["schemas"]["Collection"];
      contact?: components["schemas"]["Contact"];
      sequence?: components["schemas"]["ShipmentSequence"];
      sequenceNumber?: string;
      status?: string;
      /** Format: iri-reference */
      distributor?: string;
      /** Format: iri-reference */
      service?: string;
      shipFrom?: components["schemas"]["ShipFrom"];
      /** Format: iri-reference */
      shipFromAddressBookItem?: string;
      /** Format: iri-reference */
      shipToAddressBookItem?: string;
      shipTo?: components["schemas"]["ShipTo"];
      dispatch?: components["schemas"]["Dispatch"];
      delivery?: components["schemas"]["Delivery"];
      totalWeight?: number;
      totalItems?: number;
      totalVolume?: number;
      totalLoadingMeters?: number;
      totalValue?: number;
      export?: boolean;
      import?: boolean;
      domestic?: boolean;
      exportToOutsideOfEU?: boolean;
      importFromOutsideOfEU?: boolean;
      incoTerms?: string;
      purchaseRate?: components["schemas"]["RateInterface"];
      purchaseRates?: components["schemas"]["RateInterface"][];
      salesRate?: components["schemas"]["RateInterface"];
      salesRates?: components["schemas"]["RateInterface"][];
      /** Format: iri-reference */
      user?: string;
      insurance?: components["schemas"]["Insurance"];
      /** Format: iri-reference */
      adminUser?: string;
      flagged?: boolean;
      flaggedManual?: boolean;
      internalRemark?: string;
      draft?: boolean;
      dpdDepotCode?: string;
      versionV2?: boolean;
    };
    ShipmentItemInterface: {
      quantity?: number;
      /** Format: iri-reference */
      type?: string;
      typeGroup?: components["schemas"]["Group"];
      stackable?: boolean;
      dimensions?: components["schemas"]["Dimensions"];
      dimensionSorted?: readonly number[];
      volume?: number;
      weight?: number;
      unCode?: components["schemas"]["UNCode"];
      value?: number;
      amount?: number;
      customerReference1?: string;
      customerReference2?: string;
      subject?: components["schemas"]["ShipmentInterface"];
      contents?: components["schemas"]["Collection"];
    };
    ShipmentManifest: {
      sequence?: components["schemas"]["ShipmentManifestSequence"];
      /** Format: iri-reference */
      distributor?: string;
      /** Format: iri-reference */
      relation?: string;
      /** Format: iri-reference */
      user?: string;
      shipments?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      packageCount?: number;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    ShipmentManifestSequence: {
      number?: number;
    };
    "ShipmentQuotation-conversation-read": {
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "ShipmentQuotation-shipment-quotation-collection-read": {
      /** Format: uuid */
      id?: string;
      sequence?: string;
    };
    "ShipmentQuotation-shipment-quotation-item-read": {
      rejectionRemark?: string;
      shipment?: components["schemas"]["Shipment-shipment-quotation-item-read"];
      items?: components["schemas"]["Item-shipment-quotation-item-read"][];
      reference?: string;
      salesRate?: components["schemas"]["ShipmentQuotationRate-shipment-quotation-item-read"];
      /** Format: date-time */
      sentAt?: string;
      /** Format: date-time */
      expiresAt?: string;
      /** Format: date-time */
      acceptedAt?: string;
      /**
       * @default new
       * @example new
       */
      status?: string;
      transportType?: components["schemas"]["TransportType-shipment-quotation-item-read"];
      service?: components["schemas"]["Service-shipment-quotation-item-read"];
      shipFrom?: components["schemas"]["ShipFrom-shipment-quotation-item-read"];
      shipTo?: components["schemas"]["ShipTo-shipment-quotation-item-read"];
      dispatch?: components["schemas"]["Dispatch-shipment-quotation-item-read"];
      delivery?: components["schemas"]["Delivery-shipment-quotation-item-read"];
      /** Format: uuid */
      id?: string;
      conversation?: components["schemas"]["Conversation-shipment-quotation-item-read"];
      sequence?: string;
    };
    "ShipmentQuotationRate-shipment-quotation-item-read": {
      distributor?: components["schemas"]["Distributor-shipment-quotation-item-read"];
      service?: components["schemas"]["Service-shipment-quotation-item-read"];
      price?: number;
    };
    ShipmentRate: {
      /** Format: iri-reference */
      shipment?: string;
      surcharges?: components["schemas"]["ShipmentRateSurcharge"][];
      exactSalesInvoiceId?: string;
      invoice?: components["schemas"]["Invoice"];
      type?: string;
      /** Format: uuid */
      pricelistId?: string;
      /** Format: iri-reference */
      distributor?: string;
      /** Format: iri-reference */
      service?: string;
      price?: number;
      totalPrice?: number;
      vat: components["schemas"]["Vat"];
      remark?: string;
      processingDays?: string;
      departures?: string[];
      /** Format: date-time */
      expectedDelivery?: string;
      priceRule?: components["schemas"]["PriceRules"];
      onRequest?: boolean;
      manual?: boolean;
      /** Format: iri-reference */
      user?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: iri-reference */
      subject?: string;
      invoiced?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
      priceIncl?: number;
      tax?: number;
      basePrice?: number;
      basePriceIncl?: number;
      baseTaxPrice?: number;
      totalTax?: number;
      totalPriceIncl?: number;
      nonManualSurcharges?: readonly components["schemas"]["RateSurchargeInterface"][];
      manualSurcharges?: readonly components["schemas"]["RateSurchargeInterface"][];
      energySurcharge?: components["schemas"]["RateSurchargeInterface"];
      description?: string;
      departuresAsString?: string;
    };
    "ShipmentRate-ScanInbound.Read": {
      service?: components["schemas"]["Service-ScanInbound.Read"];
    };
    ShipmentRateSurcharge: {
      rate?: components["schemas"]["ShipmentRate"];
      exactSalesInvoiceId?: string;
      invoice?: components["schemas"]["Invoice"];
      /** Format: iri-reference */
      surchargeSet?: string;
      surcharge?: components["schemas"]["Surcharge"];
      price?: number;
      vat: components["schemas"]["Vat"];
      description?: string;
      priceRule?: components["schemas"]["PriceRules"];
      onRequest?: boolean;
      /** Format: uuid */
      id?: string;
      invoiced?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
      priceIncl?: number;
      tax?: number;
      insurance?: boolean;
      energy?: boolean;
    };
    ShipmentSequence: {
      number?: number;
    };
    "ShipmentSequence-ScanInbound.Read": {
      number?: number;
    };
    ShipmentSurchargeSet: {
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      surchargeSet?: string;
      manual?: boolean;
    };
    "ShipmentSurchargeSet-shipment-item-read": {
      /** Format: iri-reference */
      surchargeSet?: string;
      manual?: boolean;
    };
    "ShipmentSurchargeSet-shipment-write": {
      /** Format: iri-reference */
      surchargeSet?: string;
      manual?: boolean;
    };
    ShipmentTask: {
      /** Format: iri-reference */
      shipment: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      description?: string;
      status?: string;
      category: components["schemas"]["Category"];
      template?: components["schemas"]["Template"];
      title: string;
      body: string;
      /** Format: iri-reference */
      createdBy: string;
      /** Format: iri-reference */
      assignee: string;
      /** Format: date-time */
      due?: string;
      overDue?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    /** @description This is a Platform integration as well as an ApiClient integration. The Shopify microservice posts to us, the Platform, using API credentials. */
    "ShopifyServiceIntegration-integration-item-post-read": {
      client?: components["schemas"]["Client-integration-item-post-read"];
      shopUrl?: string;
      /** Format: uuid */
      id?: string;
      externalAccountId?: string;
    };
    /** @description This is a Platform integration as well as an ApiClient integration. The Shopify microservice posts to us, the Platform, using API credentials. */
    "ShopifyServiceIntegration-integration-item-read": {
      shopUrl?: string;
      /** Format: uuid */
      id?: string;
      type?: string;
      externalAccountId?: string;
    };
    /** @description This is a Platform integration as well as an ApiClient integration. The Shopify microservice posts to us, the Platform, using API credentials. */
    "ShopifyServiceIntegration-integration-item-write": {
      /** Format: iri-reference */
      relation?: string;
      shopUrl?: string;
      externalAccountId?: string;
    };
    "Status-transport-status-read": {
      /** Format: iri-reference */
      step?: string;
      data?: {
        [key: string]: string;
      };
      /** Format: uuid */
      id?: string;
    };
    "Status-transport-status-write": {
      /** Format: iri-reference */
      step?: string;
      data?: {
        [key: string]: string;
      };
    };
    Step: {
      number?: number;
      /** Format: iri-reference */
      route?: string;
      type: string;
      /** Format: date-time */
      estimatedArrival?: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      times?: components["schemas"]["Times"];
      distance?: number;
      description?: string;
      reference?: string;
      instructions?: string;
      address?: components["schemas"]["Address"];
      phoneNumber?: components["schemas"]["PhoneNumber"];
      /** Format: iri-reference */
      shipment?: string;
      shipments?: string[];
      /** Format: iri-reference */
      depot?: string;
      /** Format: iri-reference */
      pickup?: string;
      load?: components["schemas"]["Load"];
      loadPercentage?: number;
      done?: boolean;
      position?: number;
      activities?: string[];
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Step-shipment-collection-read": {
      route?: components["schemas"]["Route-shipment-collection-read"];
    };
    "Step-transport-route-item-read": {
      number?: number;
      type: string;
      /** Format: date-time */
      estimatedArrival?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-route-item-read"];
      distance?: number;
      description?: string;
      reference?: string;
      address?: components["schemas"]["Address-transport-route-item-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-route-item-read"];
      shipments?: components["schemas"]["Shipment-transport-route-item-read"][];
      /** Format: iri-reference */
      depot?: string;
      load?: components["schemas"]["Load-transport-route-item-read"];
      loadPercentage?: number;
      done?: boolean;
      position?: number;
      activities?: components["schemas"]["TaskActivity-transport-route-item-read"][];
      /** Format: uuid */
      id?: string;
    };
    "Step-transport-route-item-write": {
      number?: number;
      type: string;
      position?: number;
      activities?: string[];
    };
    "Step-transport-step-collection-read": {
      number?: number;
      /** Format: iri-reference */
      route?: string;
      type: string;
      /** Format: date-time */
      estimatedArrival?: string;
      timeWindow?: components["schemas"]["TimeWindow-transport-step-collection-read"];
      distance?: number;
      description?: string;
      reference?: string;
      address?: components["schemas"]["Address-transport-step-collection-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-step-collection-read"];
      depot?: components["schemas"]["Depot-transport-step-collection-read"];
      load?: components["schemas"]["Load-transport-step-collection-read"];
      loadPercentage?: number;
      done?: boolean;
      position?: number;
      activities?: components["schemas"]["TaskActivity-transport-step-collection-read"][];
      /** Format: uuid */
      id?: string;
    };
    "Step-transport-task-collection-read": {
      number?: number;
      route?: components["schemas"]["Route-transport-task-collection-read"];
    };
    "Step-transport-task-collection-read_transport-task_label-collection-read": {
      number?: number;
      route?: components["schemas"]["Route-transport-task-collection-read_transport-task_label-collection-read"];
    };
    "Step-transport-task-item-read": {
      number?: number;
      route?: components["schemas"]["Route-transport-task-item-read"];
    };
    Summary: {
      cost?: number;
      pickup?: components["schemas"]["Load"];
      delivery?: components["schemas"]["Load"];
      loadPercentage?: number;
      times?: components["schemas"]["Times"];
      distance?: number;
    };
    "Summary-transport-route-item-read": {
      cost?: number;
      pickup?: components["schemas"]["Load-transport-route-item-read"];
      delivery?: components["schemas"]["Load-transport-route-item-read"];
      loadPercentage?: number;
      times?: components["schemas"]["Times-transport-route-item-read"];
      distance?: number;
    };
    "Summary-transport-route_collection-item-read": {
      cost?: number;
      pickup?: components["schemas"]["Load-transport-route_collection-item-read"];
      delivery?: components["schemas"]["Load-transport-route_collection-item-read"];
      loadPercentage?: number;
      times?: components["schemas"]["Times-transport-route_collection-item-read"];
      distance?: number;
    };
    "Summary-transport-route_collection-item-write": Record<string, never>;
    Surcharge: {
      /** Format: iri-reference */
      set?: string;
      type?: string;
      key?: string;
      /** Format: iri-reference */
      distributor?: string;
      distributorCode?: string;
      /** @description Property to determine if surcharge price should be added to base price before calculating energy surcharge. */
      includeEnergySurchargeInBase?: boolean;
      price?: number;
      percentage?: number;
      minPrice?: number;
      maxPrice?: number;
      internalRemark?: string;
      conditions?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "SurchargeSet-surcharge-set-item-read": {
      /** Format: uuid */
      id?: string;
    };
    Task: {
      /**
       * @default open
       * @example open
       */
      status?: string;
      category: components["schemas"]["Category"];
      template?: components["schemas"]["Template"];
      title: string;
      body: string;
      /** Format: iri-reference */
      createdBy: string;
      /** Format: iri-reference */
      assignee: string;
      /** Format: date-time */
      due?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      description?: string;
      overDue?: boolean;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Task-transport-task-collection-read": {
      followUpTask?: components["schemas"]["Task-transport-task-collection-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-collection-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-collection-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-collection-read"][];
      skills?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relation?: components["schemas"]["Relation-transport-task-collection-read"];
    };
    "Task-transport-task-collection-read_transport-task_label-collection-read": {
      recomputeType?: components["schemas"]["RecomputeType-transport-task-collection-read_transport-task_label-collection-read"];
      recomputedBy?: components["schemas"]["AdminUser-transport-task-collection-read_transport-task_label-collection-read"];
      /** Format: date-time */
      recomputedAt?: string;
      followUpTask?: components["schemas"]["Task-transport-task-collection-read_transport-task_label-collection-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-collection-read_transport-task_label-collection-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-collection-read_transport-task_label-collection-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-collection-read_transport-task_label-collection-read"][];
      skills?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relation?: components["schemas"]["Relation-transport-task-collection-read_transport-task_label-collection-read"];
    };
    "Task-transport-task-item-read": {
      followUpTask?: components["schemas"]["Task-transport-task-item-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-item-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-item-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-item-read"][];
      skills?: string[];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relation?: components["schemas"]["Relation-transport-task-item-read"];
    };
    "Task-transport-task-item-write": {
      dateRange?: components["schemas"]["DateRange-transport-task-item-write"];
    };
    "Task-transport-unassigned-item-read": {
      skills?: string[];
    };
    "TaskActivity-transport-route-item-read": {
      /** Format: iri-reference */
      task: string;
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      action: string;
      reference?: string;
      instructions?: string;
      address?: components["schemas"]["Address-transport-route-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-route-item-read"];
    };
    "TaskActivity-transport-step-collection-read": {
      /** Format: iri-reference */
      task: string;
      description?: string;
      reference?: string;
      address?: components["schemas"]["Address-transport-step-collection-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-step-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-step-collection-read"];
    };
    "TaskActivity-transport-task-activity-collection-read": Record<string, never>;
    "TaskActivity-transport-task-activity-item-read": Record<string, never>;
    "TaskActivity-transport-task-collection-read": {
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      action: string;
      reference?: string;
      instructions?: string;
      address?: components["schemas"]["Address-transport-task-collection-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-task-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-task-collection-read"];
      step?: components["schemas"]["Step-transport-task-collection-read"];
    };
    "TaskActivity-transport-task-collection-read_transport-task_label-collection-read": {
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      action: string;
      reference?: string;
      instructions?: string;
      address?: components["schemas"]["Address-transport-task-collection-read_transport-task_label-collection-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-task-collection-read_transport-task_label-collection-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-task-collection-read_transport-task_label-collection-read"];
      step?: components["schemas"]["Step-transport-task-collection-read_transport-task_label-collection-read"];
    };
    "TaskActivity-transport-task-item-read": {
      description?: string;
      /** Format: iri-reference */
      depot?: string;
      action: string;
      reference?: string;
      instructions?: string;
      address?: components["schemas"]["Address-transport-task-item-read"];
      phoneNumber?: components["schemas"]["PhoneNumber-transport-task-item-read"];
      timeWindow?: components["schemas"]["TimeWindow-transport-task-item-read"];
      step?: components["schemas"]["Step-transport-task-item-read"];
    };
    "TaskLabel-transport-task-collection-read_transport-task_label-collection-read": {
      label?: components["schemas"]["Label-transport-task-collection-read_transport-task_label-collection-read"];
      inbound?: boolean;
      recomputeType?: components["schemas"]["RecomputeType-transport-task-collection-read_transport-task_label-collection-read"];
      recomputedBy?: components["schemas"]["AdminUser-transport-task-collection-read_transport-task_label-collection-read"];
      /** Format: date-time */
      recomputedAt?: string;
      followUpTask?: components["schemas"]["Task-transport-task-collection-read_transport-task_label-collection-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      shipment?: components["schemas"]["Shipment-transport-task-collection-read_transport-task_label-collection-read"];
      relation?: components["schemas"]["Relation-transport-task-collection-read_transport-task_label-collection-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-collection-read_transport-task_label-collection-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-collection-read_transport-task_label-collection-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-collection-read_transport-task_label-collection-read"][];
      skills?: string[];
    };
    "TaskLabel-transport-task-item-read": {
      label?: components["schemas"]["Label-transport-task-item-read"];
      inbound?: boolean;
      followUpTask?: components["schemas"]["Task-transport-task-item-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      shipment?: components["schemas"]["Shipment-transport-task-item-read"];
      relation?: components["schemas"]["Relation-transport-task-item-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-item-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-item-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-item-read"][];
      skills?: string[];
    };
    "TaskLabel-transport-task-item-write": {
      dateRange?: components["schemas"]["DateRange-transport-task-item-write"];
    };
    "TaskPickup-transport-task-collection-read": {
      /** Format: iri-reference */
      pickup?: string;
      followUpTask?: components["schemas"]["Task-transport-task-collection-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relation?: components["schemas"]["Relation-transport-task-collection-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-collection-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-collection-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-collection-read"][];
      skills?: string[];
    };
    "TaskPickup-transport-task-item-read": {
      /** Format: iri-reference */
      pickup?: string;
      followUpTask?: components["schemas"]["Task-transport-task-item-read"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relation?: components["schemas"]["Relation-transport-task-item-read"];
      dateRange?: components["schemas"]["DateRange-transport-task-item-read"];
      pickupActivity?: components["schemas"]["TaskActivity-transport-task-item-read"];
      deliveryActivities?: components["schemas"]["TaskActivity-transport-task-item-read"][];
      skills?: string[];
    };
    "TaskPickup-transport-task-item-write": {
      dateRange?: components["schemas"]["DateRange-transport-task-item-write"];
    };
    Template: {
      key?: string;
      tasks?: components["schemas"]["Task"][];
      category?: components["schemas"]["Category"];
      title?: string;
      body?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    TimeWindow: {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-address_book-item-read": Record<string, never>;
    "TimeWindow-shipment-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-shipment-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-shipment-quotation-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-shipment-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-depot-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-depot-collection-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-depot-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-pickup-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-pickup-item-read": Record<string, never>;
    "TimeWindow-transport-pickup_schedule-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-pickup_schedule-collection-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-pickup_schedule-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-pickup_schedule-item-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection-collection-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection-item-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection_vehicle-collection-read": Record<string, never>;
    "TimeWindow-transport-route_collection_vehicle-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-route_collection_vehicle-item-write": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-step-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-task-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-task-collection-read_transport-task_label-collection-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-task-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    "TimeWindow-transport-unassigned-item-read": {
      /** Format: date-time */
      begin?: string;
      /** Format: date-time */
      end?: string;
    };
    Times: {
      setup?: number;
      service?: number;
      duration?: number;
      waiting?: number;
      total?: number;
    };
    "Times-transport-route-item-read": {
      setup?: number;
      service?: number;
      duration?: number;
      waiting?: number;
      total?: number;
    };
    "Times-transport-route_collection-item-read": {
      setup?: number;
      service?: number;
      duration?: number;
      waiting?: number;
      total?: number;
    };
    "Tracking-tracking-read": {
      lines?: components["schemas"]["TrackingLine-tracking-read"][];
      /** Format: iri-reference */
      label?: string;
      /** Format: uuid */
      id?: string;
    };
    TrackingEmail: {
      brand?: components["schemas"]["Brand"];
      trackingEmailType?: components["schemas"]["TrackingEmailType"];
      /** Format: iri-reference */
      country?: string;
      active?: boolean;
      subject?: string;
      buttonText?: string;
      content?: string;
      emailRecipient?: components["schemas"]["BrandEmailRecipient"];
      replyToEmailAddress?: string;
      bccEmailAddress?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relationPaths?: readonly string[];
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    TrackingEmailType: {
      description?: string;
      key?: components["schemas"]["ShipmentEmailType"];
      position?: number;
      enabled?: boolean;
      trackingEmailTypeVariables?: components["schemas"]["TrackingEmailTypeVariable"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    TrackingEmailTypeVariable: {
      trackingEmailTypeVariableGroup?: components["schemas"]["TrackingEmailTypeVariableGroup"];
      trackingEmailTypes?: components["schemas"]["TrackingEmailType"][];
      description?: string;
      propertyPath?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    TrackingEmailTypeVariableGroup: {
      /** @description Used to display in the variable options. */
      displayName?: string;
      /** @description Used as prefix for variables to create unique names. */
      name?: string;
      trackingEmailTypeVariables?: components["schemas"]["TrackingEmailTypeVariable"][];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "TrackingLine-tracking-read": {
      /** Format: date-time */
      dateTime?: string;
      distributorDescription?: string;
      distributorLocation?: string;
      /** @description Internal label workflow status. */
      status?: string;
    };
    TrackingPage: {
      brand?: components["schemas"]["Brand"];
      /**
       * @default #f3f4f6
       * @example #f3f4f6
       */
      backgroundColor?: string;
      content?: string;
      useBrandHeader?: boolean;
      useBrandFooter?: boolean;
      active?: boolean;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      relationPaths?: readonly string[];
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    TransportPickupRequest: {
      /** Format: date-time */
      date?: string;
      /** Format: iri-reference */
      addressBookItem: string;
      timeWindow?: components["schemas"]["TimeWindow"];
      /** Format: iri-reference */
      relation?: string;
      depots?: string[];
      transportTasks?: string[];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "TransportPickupRequest-transport-pickup_request-collection-read": {
      /** Format: date-time */
      date?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "TransportPickupRequest-transport-pickup_request-collection-write": {
      /** Format: date-time */
      date?: string;
    };
    "TransportPickupRequest-transport-pickup_request-item-read": {
      /** Format: date-time */
      date?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "TransportPickupRequest-transport-pickup_request-item-write": {
      /** Format: date-time */
      date?: string;
    };
    TransportType: {
      name?: string;
      value?: string;
      displayValue?: string;
    };
    "TransportType-shipment-item-read": Record<string, never>;
    "TransportType-shipment-quotation-item-read": Record<string, never>;
    "TransportType-shipment-write": Record<string, never>;
    "Type-shipment-item-read": {
      description: string;
      /** Format: uuid */
      id?: string;
    };
    "Type-type": {
      description: string;
      /** Format: uuid */
      id?: string;
    };
    UNCode: {
      number: number;
      descriptionNL?: string;
      descriptionEN?: string;
      descriptionDE?: string;
      descriptionFR?: string;
      packingGroup?: string;
      class?: string;
      tunnelRestrictionCode?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    Unassigned: {
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      task?: string;
      reason?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "Unassigned-transport-unassigned-collection-read": Record<string, never>;
    "Unassigned-transport-unassigned-item-read": {
      task?: components["schemas"]["Task-transport-unassigned-item-read"];
      reason?: string;
    };
    UnassignedLabel: {
      /** Format: iri-reference */
      label?: string;
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      task?: string;
      reason?: string;
      /** Format: uuid */
      id?: string;
      /** Format: iri-reference */
      shipment?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "UnassignedLabel-transport-unassigned-item-read": {
      label?: components["schemas"]["Label-transport-unassigned-item-read"];
      task?: components["schemas"]["Task-transport-unassigned-item-read"];
      reason?: string;
      shipment?: components["schemas"]["Shipment-transport-unassigned-item-read"];
    };
    UnassignedPickup: {
      /** Format: iri-reference */
      pickup?: string;
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      task?: string;
      reason?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "UnassignedPickup-transport-unassigned-item-read": {
      pickup?: components["schemas"]["Pickup-transport-unassigned-item-read"];
      task?: components["schemas"]["Task-transport-unassigned-item-read"];
      reason?: string;
    };
    UnassignedShipment: {
      /** Format: iri-reference */
      shipment?: string;
      /** Format: iri-reference */
      routeCollection?: string;
      /** Format: iri-reference */
      task?: string;
      reason?: string;
      /** Format: uuid */
      id?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    "UnassignedShipment-transport-unassigned-item-read": {
      task?: components["schemas"]["Task-transport-unassigned-item-read"];
      reason?: string;
    };
    "User-pickup_request-collection-read": {
      name?: string;
    };
    "User-user-collection-read": Record<string, never>;
    "User-user-collection-write": Record<string, never>;
    "User-user-item-read": {
      relation?: components["schemas"]["Relation-user-item-read"];
      name?: string;
    };
    Vat: {
      code: number;
      description: string;
      percentage?: number;
      country?: string;
      type?: components["schemas"]["VatTransactionType"];
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      exactId?: string;
      idAsString?: string;
      idAsBytes?: string;
      idAsHex?: string;
      idAsDatabaseValue?: string;
    };
    VatTransactionType: {
      name?: string;
      value?: string;
    };
    "Vehicle-shipment-collection-read": {
      type?: string;
    };
    "Vehicle-transport-pickup_schedule-collection-read": {
      description?: string;
    };
    "Vehicle-transport-route-collection-read": {
      type?: string;
      description?: string;
      /** Format: uuid */
      id?: string;
    };
    "Vehicle-transport-route-item-read": {
      type?: string;
      color?: string;
      /** Format: uuid */
      id?: string;
    };
    "Vehicle-transport-route_collection-item-read": {
      depot?: components["schemas"]["Depot-transport-route_collection-item-read"];
      type?: string;
      description?: string;
      licensePlate?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-route_collection-item-read"];
      capacity?: components["schemas"]["Load-transport-route_collection-item-read"];
      color?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Vehicle-transport-task-collection-read": {
      description?: string;
    };
    "Vehicle-transport-task-collection-read_transport-task_label-collection-read": {
      description?: string;
    };
    "Vehicle-transport-task-item-read": {
      description?: string;
    };
    "Vehicle-transport-unassigned-item-read": {
      description?: string;
      /** Format: uuid */
      id?: string;
    };
    "Vehicle-transport-vehicle-collection-read": {
      depot?: components["schemas"]["Depot-transport-vehicle-collection-read"];
      type?: string;
      description?: string;
      licensePlate?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-vehicle-collection-read"];
      capacity?: components["schemas"]["Load-transport-vehicle-collection-read"];
      color?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Vehicle-transport-vehicle-collection-write": {
      /** Format: iri-reference */
      depot?: string;
      type?: string;
      description?: string;
      licensePlate?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-vehicle-collection-write"];
      capacity?: components["schemas"]["Load-transport-vehicle-collection-write"];
      color?: string;
    };
    "Vehicle-transport-vehicle-item-read": {
      depot?: components["schemas"]["Depot-transport-vehicle-item-read"];
      type?: string;
      description?: string;
      licensePlate?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-vehicle-item-read"];
      capacity?: components["schemas"]["Load-transport-vehicle-item-read"];
      color?: string;
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Vehicle-transport-vehicle-item-write": {
      depot?: components["schemas"]["Depot-transport-vehicle-item-write"];
      type?: string;
      description?: string;
      licensePlate?: string;
      phoneNumber?: components["schemas"]["PhoneNumber-transport-vehicle-item-write"];
      capacity?: components["schemas"]["Load-transport-vehicle-item-write"];
      color?: string;
    };
    WarehouseInformation: {
      waybill?: string;
      tasks?: components["schemas"]["Collection"];
      /** Format: iri-reference */
      label?: string;
      /** Format: iri-reference */
      shipment?: string;
      /**
       * Format: iri-reference
       * @description Temp work around due to not functional inclusion of subresources through json api spec in the current version.
       */
      relation?: string;
    };
    "WarehouseInformation-transport-warehouse_waybill_info-read": {
      waybill?: string;
      tasks?: components["schemas"]["Collection-transport-warehouse_waybill_info-read"];
      /** Format: iri-reference */
      label?: string;
      shipment?: components["schemas"]["Shipment-transport-warehouse_waybill_info-read"];
      relation?: components["schemas"]["Relation-transport-warehouse_waybill_info-read"];
    };
    "Webhook-webhook-collection-read": {
      url?: string;
      /** Format: iri-reference */
      integration?: string;
      event?: string;
      /** Format: uuid */
      id?: string;
    };
    "Webhook-webhook-item-read": {
      url?: string;
      /** Format: iri-reference */
      integration?: string;
      event?: string;
      /** Format: uuid */
      id?: string;
    };
    "Webhook-webhook-write": {
      url?: string;
      /** Format: iri-reference */
      integration?: string;
      event?: string;
    };
    "Widget-widget-item-read": {
      name: string;
      description: string;
      key: string;
      /** @example 1 */
      width: number;
      /** @example 4 */
      height: number;
      dataset?: string[];
      /** Format: uuid */
      id?: string;
    };
    "Widget-widget-read": {
      name: string;
      description: string;
      key: string;
      /** @example 1 */
      width: number;
      /** @example 4 */
      height: number;
      dataset?: string[];
      /** Format: uuid */
      id?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Retrieves the collection of AddressBookItems resources. */
  getAddressBookItemsCollection: {
    parameters: {
      query?: {
        "relation.id"?: unknown;
        "relation.id[]"?: unknown;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description AddressBookItems collection response */
      200: {
        content: {
          "application/json": components["schemas"]["AddressBookItems-address_book-collection-read"][];
          "application/vnd.api+json": components["schemas"]["AddressBookItems-address_book-collection-read"][];
          "text/html": components["schemas"]["AddressBookItems-address_book-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a AddressBookItems resource. */
  getAddressBookItemsItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description AddressBookItems resource response */
      200: {
        content: {
          "application/json": components["schemas"]["AddressBookItems-address_book-item-read"];
          "application/vnd.api+json": components["schemas"]["AddressBookItems-address_book-item-read"];
          "text/html": components["schemas"]["AddressBookItems-address_book-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of AdminUser resources. */
  getAdminUserCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description AdminUser collection response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUser-admin-user-read"][];
          "application/vnd.api+json": components["schemas"]["AdminUser-admin-user-read"][];
          "text/html": components["schemas"]["AdminUser-admin-user-read"][];
        };
      };
    };
  };
  /** Retrieves a AdminUser resource. */
  getAdminUserItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description AdminUser resource response */
      200: {
        content: {
          "application/json": components["schemas"]["AdminUser-admin-user-item-read"];
          "application/vnd.api+json": components["schemas"]["AdminUser-admin-user-item-read"];
          "text/html": components["schemas"]["AdminUser-admin-user-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of BulkShipment resources. */
  getBulkShipmentCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description BulkShipment collection response */
      200: {
        content: {
          "application/json": components["schemas"]["BulkShipment-bulk-shipment-collection-read"][];
          "application/vnd.api+json": components["schemas"]["BulkShipment-bulk-shipment-collection-read"][];
          "text/html": components["schemas"]["BulkShipment-bulk-shipment-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a BulkShipment resource. */
  getBulkShipmentItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description BulkShipment resource response */
      200: {
        content: {
          "application/json": components["schemas"]["BulkShipment-bulk-shipment-item-read"];
          "application/vnd.api+json": components["schemas"]["BulkShipment-bulk-shipment-item-read"];
          "text/html": components["schemas"]["BulkShipment-bulk-shipment-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Postcode resources. */
  "buzzie-postcodesPostcodeCollection": {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description postcode, region.name */
        "_global_search.properties"?: string;
        "_order[postcode]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Postcode collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Postcode-Api.BuzziePostcode"][];
          "text/csv": components["schemas"]["Postcode-Api.BuzziePostcode"][];
        };
      };
    };
  };
  /** Retrieves the collection of Conversation resources. */
  getConversationCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Conversation collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Conversation-conversation-read"][];
          "application/vnd.api+json": components["schemas"]["Conversation-conversation-read"][];
          "text/html": components["schemas"]["Conversation-conversation-read"][];
        };
      };
    };
  };
  /** Creates a Conversation resource. */
  postConversationCollection: {
    /** @description The new Conversation resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Conversation-conversation-write"];
        "application/vnd.api+json": components["schemas"]["Conversation-conversation-write"];
        "text/html": components["schemas"]["Conversation-conversation-write"];
      };
    };
    responses: {
      /** @description Conversation resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Conversation-conversation-item-read"];
          "application/vnd.api+json": components["schemas"]["Conversation-conversation-item-read"];
          "text/html": components["schemas"]["Conversation-conversation-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Conversation resource. */
  getConversationItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Conversation resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Conversation-conversation-item-read"];
          "application/vnd.api+json": components["schemas"]["Conversation-conversation-item-read"];
          "text/html": components["schemas"]["Conversation-conversation-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Message resources. */
  api_conversations_messages_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Message collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"][];
          "application/vnd.api+json": components["schemas"]["Message"][];
          "text/html": components["schemas"]["Message"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Country resources. */
  getCountryCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Country collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Country-country-read"][];
          "application/vnd.api+json": components["schemas"]["Country-country-read"][];
          "text/html": components["schemas"]["Country-country-read"][];
        };
      };
    };
  };
  /** Retrieves a Country resource. */
  getCountryItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Country resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Country-country-item-read"];
          "application/vnd.api+json": components["schemas"]["Country-country-item-read"];
          "text/html": components["schemas"]["Country-country-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Distributor resources. */
  getDistributorCollection: {
    parameters: {
      query?: {
        name?: string;
        code?: string;
        "code[]"?: string[];
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Distributor collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Distributor-distributor-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Distributor-distributor-collection-read"][];
          "text/html": components["schemas"]["Distributor-distributor-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Distributor resource. */
  getDistributorItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Distributor resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Distributor-distributor-item-read"];
          "application/vnd.api+json": components["schemas"]["Distributor-distributor-item-read"];
          "text/html": components["schemas"]["Distributor-distributor-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Integration resources. */
  getIntegrationCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Integration collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Integration-integration-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Integration-integration-collection-read"][];
          "text/html": components["schemas"]["Integration-integration-collection-read"][];
        };
      };
    };
  };
  /** Creates a ShopifyServiceIntegration resource. */
  postShopifyServiceIntegrationCollection: {
    /** @description The new ShopifyServiceIntegration resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ShopifyServiceIntegration-integration-item-write"];
        "application/vnd.api+json": components["schemas"]["ShopifyServiceIntegration-integration-item-write"];
        "text/html": components["schemas"]["ShopifyServiceIntegration-integration-item-write"];
      };
    };
    responses: {
      /** @description ShopifyServiceIntegration resource created */
      201: {
        content: {
          "application/json": components["schemas"]["ShopifyServiceIntegration-integration-item-post-read"];
          "application/vnd.api+json": components["schemas"]["ShopifyServiceIntegration-integration-item-post-read"];
          "text/html": components["schemas"]["ShopifyServiceIntegration-integration-item-post-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a ShopifyServiceIntegration resource. */
  getShopifyServiceIntegrationItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description ShopifyServiceIntegration resource response */
      200: {
        content: {
          "application/json": components["schemas"]["ShopifyServiceIntegration-integration-item-read"];
          "application/vnd.api+json": components["schemas"]["ShopifyServiceIntegration-integration-item-read"];
          "text/html": components["schemas"]["ShopifyServiceIntegration-integration-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Integration resource. */
  getIntegrationItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Integration resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Integration-integration-item-read"];
          "application/vnd.api+json": components["schemas"]["Integration-integration-item-read"];
          "text/html": components["schemas"]["Integration-integration-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Label resource. */
  getLabelItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Label resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Label-label-read"];
          "application/vnd.api+json": components["schemas"]["Label-label-read"];
          "text/html": components["schemas"]["Label-label-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Matrix resources. */
  getMatrixCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Matrix collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Matrix-matrix-read"][];
          "application/vnd.api+json": components["schemas"]["Matrix-matrix-read"][];
          "text/html": components["schemas"]["Matrix-matrix-read"][];
        };
      };
    };
  };
  /** Retrieves a Matrix resource. */
  getMatrixItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Matrix resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Matrix-matrix-item-read"];
          "application/vnd.api+json": components["schemas"]["Matrix-matrix-item-read"];
          "text/html": components["schemas"]["Matrix-matrix-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of MatrixGroup resources. */
  getMatrixGroupCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description MatrixGroup collection response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixGroup-matrix-group-read"][];
          "application/vnd.api+json": components["schemas"]["MatrixGroup-matrix-group-read"][];
          "text/html": components["schemas"]["MatrixGroup-matrix-group-read"][];
        };
      };
    };
  };
  /** Retrieves a MatrixGroup resource. */
  getMatrixGroupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description MatrixGroup resource response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixGroup-matrix-group-item-read"];
          "application/vnd.api+json": components["schemas"]["MatrixGroup-matrix-group-item-read"];
          "text/html": components["schemas"]["MatrixGroup-matrix-group-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of MatrixPostcode resources. */
  getMatrixPostcodeCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description MatrixPostcode collection response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixPostcode-matrix-postcode-read"][];
          "application/vnd.api+json": components["schemas"]["MatrixPostcode-matrix-postcode-read"][];
          "text/html": components["schemas"]["MatrixPostcode-matrix-postcode-read"][];
        };
      };
    };
  };
  /** Retrieves a MatrixPostcode resource. */
  getMatrixPostcodeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description MatrixPostcode resource response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixPostcode-matrix-postcode-item-read"];
          "application/vnd.api+json": components["schemas"]["MatrixPostcode-matrix-postcode-item-read"];
          "text/html": components["schemas"]["MatrixPostcode-matrix-postcode-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of MatrixRate resources. */
  getMatrixRateCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description MatrixRate collection response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixRate-matrix-rate-read"][];
          "application/vnd.api+json": components["schemas"]["MatrixRate-matrix-rate-read"][];
          "text/html": components["schemas"]["MatrixRate-matrix-rate-read"][];
        };
      };
    };
  };
  /** Retrieves a MatrixRate resource. */
  getMatrixRateItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description MatrixRate resource response */
      200: {
        content: {
          "application/json": components["schemas"]["MatrixRate-matrix-rate-item-read"];
          "application/vnd.api+json": components["schemas"]["MatrixRate-matrix-rate-item-read"];
          "text/html": components["schemas"]["MatrixRate-matrix-rate-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Creates a Message resource. */
  postMessageCollection: {
    /** @description The new Message resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Message-message-write"];
        "application/vnd.api+json": components["schemas"]["Message-message-write"];
        "text/html": components["schemas"]["Message-message-write"];
      };
    };
    responses: {
      /** @description Message resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Message-message-read"];
          "application/vnd.api+json": components["schemas"]["Message-message-read"];
          "text/html": components["schemas"]["Message-message-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Message resource. */
  getMessageItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Message resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Message-message-read"];
          "application/vnd.api+json": components["schemas"]["Message-message-read"];
          "text/html": components["schemas"]["Message-message-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the Message resource. */
  patchMessageItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Message resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Message-message-patch"];
        "application/vnd.api+json": components["schemas"]["Message-message-patch"];
      };
    };
    responses: {
      /** @description Message resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Message-message-read"];
          "application/vnd.api+json": components["schemas"]["Message-message-read"];
          "text/html": components["schemas"]["Message-message-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of ExternalOrder resources. */
  getExternalOrderCollection: {
    parameters: {
      query?: {
        externalId?: string;
        "externalId[]"?: string[];
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description ExternalOrder collection response */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalOrder-order-collection-read"][];
          "application/vnd.api+json": components["schemas"]["ExternalOrder-order-collection-read"][];
          "text/html": components["schemas"]["ExternalOrder-order-collection-read"][];
        };
      };
    };
  };
  /** Creates a ExternalOrder resource. */
  postExternalOrderCollection: {
    /** @description The new ExternalOrder resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExternalOrder-order-write"];
        "application/vnd.api+json": components["schemas"]["ExternalOrder-order-write"];
        "text/html": components["schemas"]["ExternalOrder-order-write"];
      };
    };
    responses: {
      /** @description ExternalOrder resource created */
      201: {
        content: {
          "application/json": components["schemas"]["ExternalOrder-order-item-read"];
          "application/vnd.api+json": components["schemas"]["ExternalOrder-order-item-read"];
          "text/html": components["schemas"]["ExternalOrder-order-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a ExternalOrder resource. */
  getExternalOrderItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description ExternalOrder resource response */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalOrder-order-item-read"];
          "application/vnd.api+json": components["schemas"]["ExternalOrder-order-item-read"];
          "text/html": components["schemas"]["ExternalOrder-order-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the ExternalOrder resource. */
  putExternalOrderItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated ExternalOrder resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExternalOrder-order-write"];
        "application/vnd.api+json": components["schemas"]["ExternalOrder-order-write"];
        "text/html": components["schemas"]["ExternalOrder-order-write"];
      };
    };
    responses: {
      /** @description ExternalOrder resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalOrder-order-item-read"];
          "application/vnd.api+json": components["schemas"]["ExternalOrder-order-item-read"];
          "text/html": components["schemas"]["ExternalOrder-order-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the ExternalOrder resource. */
  deleteExternalOrderItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description ExternalOrder resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of PickupRequest resources. */
  getPickupRequestCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description relation.name, relation.number, pickupAddress.contact.company, pickupAddress.contact.name, pickupAddress.address.addressLine1, pickupAddress.address.postcode, pickupAddress.address.city, pickupAddress.address.country, user.firstName, user.lastNamePrefix, user.lastName */
        "_global_search.properties"?: string;
        "_order[relation.name]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description PickupRequest collection response */
      200: {
        content: {
          "application/json": components["schemas"]["PickupRequest-pickup_request-collection-read"][];
          "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-collection-read"][];
          "text/html": components["schemas"]["PickupRequest-pickup_request-collection-read"][];
        };
      };
    };
  };
  /** Creates a PickupRequest resource. */
  postPickupRequestCollection: {
    /** @description The new PickupRequest resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PickupRequest-pickup_request-collection-write"];
        "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-collection-write"];
        "text/html": components["schemas"]["PickupRequest-pickup_request-collection-write"];
      };
    };
    responses: {
      /** @description PickupRequest resource created */
      201: {
        content: {
          "application/json": components["schemas"]["PickupRequest-pickup_request-collection-read"];
          "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-collection-read"];
          "text/html": components["schemas"]["PickupRequest-pickup_request-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a PickupRequest resource. */
  getPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description PickupRequest resource response */
      200: {
        content: {
          "application/json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "text/html": components["schemas"]["PickupRequest-pickup_request-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the PickupRequest resource. */
  putPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated PickupRequest resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PickupRequest-pickup_request-item-write"];
        "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-item-write"];
        "text/html": components["schemas"]["PickupRequest-pickup_request-item-write"];
      };
    };
    responses: {
      /** @description PickupRequest resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "text/html": components["schemas"]["PickupRequest-pickup_request-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the PickupRequest resource. */
  deletePickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description PickupRequest resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the PickupRequest resource. */
  patchPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated PickupRequest resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["PickupRequest-pickup_request-item-write"];
        "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-item-write"];
      };
    };
    responses: {
      /** @description PickupRequest resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupRequest-pickup_request-item-read"];
          "text/html": components["schemas"]["PickupRequest-pickup_request-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Creates a Shipment resource. */
  post_rateShipmentCollection: {
    /** @description The new Shipment resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Shipment-shipment-write"];
        "application/vnd.api+json": components["schemas"]["Shipment-shipment-write"];
        "text/html": components["schemas"]["Shipment-shipment-write"];
      };
    };
    responses: {
      /** @description Shipment resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Shipment"];
          "application/vnd.api+json": components["schemas"]["Shipment"];
          "text/html": components["schemas"]["Shipment"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Relation resources. */
  getRelationCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Relation collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Relation-relation-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Relation-relation-collection-read"][];
          "text/html": components["schemas"]["Relation-relation-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Relation resource. */
  getRelationItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Relation resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Relation-relation-item-read"];
          "application/vnd.api+json": components["schemas"]["Relation-relation-item-read"];
          "text/html": components["schemas"]["Relation-relation-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Creates a ScanInbound resource. */
  postScanInboundCollection: {
    /** @description The new ScanInbound resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ScanInbound-ScanInbound.Write"];
        "application/vnd.api+json": components["schemas"]["ScanInbound-ScanInbound.Write"];
        "text/html": components["schemas"]["ScanInbound-ScanInbound.Write"];
      };
    };
    responses: {
      /** @description ScanInbound resource created */
      201: {
        content: {
          "application/json": components["schemas"]["ScanInbound-ScanInbound.Read"];
          "application/vnd.api+json": components["schemas"]["ScanInbound-ScanInbound.Read"];
          "text/html": components["schemas"]["ScanInbound-ScanInbound.Read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a ScanInbound resource. */
  getScanInboundItem: {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** @description ScanInbound resource response */
      200: {
        content: {
          "application/json": components["schemas"]["ScanInbound-ScanInbound.Read"];
          "application/vnd.api+json": components["schemas"]["ScanInbound-ScanInbound.Read"];
          "text/html": components["schemas"]["ScanInbound-ScanInbound.Read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Creates a Shipment resource. */
  post_serviceShipmentCollection: {
    /** @description The new Shipment resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Shipment-shipment-write"];
        "application/vnd.api+json": components["schemas"]["Shipment-shipment-write"];
        "text/html": components["schemas"]["Shipment-shipment-write"];
      };
    };
    responses: {
      /** @description Shipment resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Shipment"];
          "application/vnd.api+json": components["schemas"]["Shipment"];
          "text/html": components["schemas"]["Shipment"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Service resource. */
  getServiceItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Service resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Service-service-item-read"];
          "application/vnd.api+json": components["schemas"]["Service-service-item-read"];
          "text/html": components["schemas"]["Service-service-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of ShipmentQuotation resources. */
  getShipmentQuotationCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description ShipmentQuotation collection response */
      200: {
        content: {
          "application/json": components["schemas"]["ShipmentQuotation-shipment-quotation-collection-read"][];
          "application/vnd.api+json": components["schemas"]["ShipmentQuotation-shipment-quotation-collection-read"][];
          "text/html": components["schemas"]["ShipmentQuotation-shipment-quotation-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a ShipmentQuotation resource. */
  getShipmentQuotationItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description ShipmentQuotation resource response */
      200: {
        content: {
          "application/json": components["schemas"]["ShipmentQuotation-shipment-quotation-item-read"];
          "application/vnd.api+json": components["schemas"]["ShipmentQuotation-shipment-quotation-item-read"];
          "text/html": components["schemas"]["ShipmentQuotation-shipment-quotation-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Shipment resources. */
  getShipmentCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description status, invoiceReference, bulk.reference, relation.name, relation.number, shipFrom.address.city, shipFrom.address.country, shipTo.address.city, shipTo.address.country, shipTo.address.postcode, vehicle.type, transportSteps.route.sequence, transportSteps.route.collection.date */
        "_global_search.properties"?: string;
        status?: string;
        "status[]"?: string[];
        invoiceReference?: string;
        "rate.distributor.code"?: string;
        "rate.distributor.code[]"?: string[];
        draft?: boolean;
        "_order[sequence.number]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Shipment collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Shipment-shipment-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Shipment-shipment-collection-read"][];
          "text/html": components["schemas"]["Shipment-shipment-collection-read"][];
        };
      };
    };
  };
  /** Creates a Shipment resource. */
  postShipmentCollection: {
    /** @description The new Shipment resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Shipment-shipment-write"];
        "application/vnd.api+json": components["schemas"]["Shipment-shipment-write"];
        "text/html": components["schemas"]["Shipment-shipment-write"];
      };
    };
    responses: {
      /** @description Shipment resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Shipment-shipment-item-read"];
          "application/vnd.api+json": components["schemas"]["Shipment-shipment-item-read"];
          "text/html": components["schemas"]["Shipment-shipment-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Item resource. */
  getItemItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Item resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Item-shipment_item-item-read"];
          "application/vnd.api+json": components["schemas"]["Item-shipment_item-item-read"];
          "text/html": components["schemas"]["Item-shipment_item-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Shipment resource. */
  getShipmentItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Shipment resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Shipment-shipment-item-read"];
          "application/vnd.api+json": components["schemas"]["Shipment-shipment-item-read"];
          "text/html": components["schemas"]["Shipment-shipment-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Label resources. */
  api_shipments_labels_get_subresource: {
    parameters: {
      query?: {
        "shipment.id"?: unknown;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Label collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Label"][];
          "application/vnd.api+json": components["schemas"]["Label"][];
          "text/html": components["schemas"]["Label"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves a SurchargeSet resource. */
  getSurchargeSetItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description SurchargeSet resource response */
      200: {
        content: {
          "application/json": components["schemas"]["SurchargeSet-surcharge-set-item-read"];
          "application/vnd.api+json": components["schemas"]["SurchargeSet-surcharge-set-item-read"];
          "text/html": components["schemas"]["SurchargeSet-surcharge-set-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Label resources. */
  track_and_traceLabelCollection: {
    parameters: {
      query?: {
        "shipment.id"?: unknown;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Label collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Label"][];
          "application/vnd.api+json": components["schemas"]["Label"][];
          "text/html": components["schemas"]["Label"][];
        };
      };
    };
  };
  /** Retrieves the collection of Tracking resources. */
  getTrackingCollection: {
    parameters: {
      query?: {
        "shipmentItem.shipment.id"?: unknown;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Tracking collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Tracking-tracking-read"][];
          "application/vnd.api+json": components["schemas"]["Tracking-tracking-read"][];
          "text/html": components["schemas"]["Tracking-tracking-read"][];
        };
      };
    };
  };
  /** Retrieves a Tracking resource. */
  getTrackingItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Tracking resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Tracking-tracking-read"];
          "application/vnd.api+json": components["schemas"]["Tracking-tracking-read"];
          "text/html": components["schemas"]["Tracking-tracking-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Depot resources. */
  getDepotCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description description, distributor.name, address.addressLine1, address.postcode, address.city */
        "_global_search.properties"?: string;
        "exists[key]"?: boolean;
        "_order[description]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Depot collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Depot-transport-depot-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Depot-transport-depot-collection-read"][];
          "text/html": components["schemas"]["Depot-transport-depot-collection-read"][];
        };
      };
    };
  };
  /** Creates a Depot resource. */
  postDepotCollection: {
    /** @description The new Depot resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Depot-transport-depot-collection-write"];
        "application/vnd.api+json": components["schemas"]["Depot-transport-depot-collection-write"];
        "text/html": components["schemas"]["Depot-transport-depot-collection-write"];
      };
    };
    responses: {
      /** @description Depot resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Depot-transport-depot-collection-read"];
          "application/vnd.api+json": components["schemas"]["Depot-transport-depot-collection-read"];
          "text/html": components["schemas"]["Depot-transport-depot-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Depot resource. */
  getDepotItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Depot resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Depot-transport-depot-item-read"];
          "application/vnd.api+json": components["schemas"]["Depot-transport-depot-item-read"];
          "text/html": components["schemas"]["Depot-transport-depot-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Depot resource. */
  putDepotItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Depot resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Depot-transport-depot-item-write"];
        "application/vnd.api+json": components["schemas"]["Depot-transport-depot-item-write"];
        "text/html": components["schemas"]["Depot-transport-depot-item-write"];
      };
    };
    responses: {
      /** @description Depot resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Depot-transport-depot-item-read"];
          "application/vnd.api+json": components["schemas"]["Depot-transport-depot-item-read"];
          "text/html": components["schemas"]["Depot-transport-depot-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the Depot resource. */
  patchDepotItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Depot resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Depot-transport-depot-item-write"];
        "application/vnd.api+json": components["schemas"]["Depot-transport-depot-item-write"];
      };
    };
    responses: {
      /** @description Depot resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Depot-transport-depot-item-read"];
          "application/vnd.api+json": components["schemas"]["Depot-transport-depot-item-read"];
          "text/html": components["schemas"]["Depot-transport-depot-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Driver resources. */
  getDriverCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description firstName, lastNamePrefix, lastName, availableDays */
        "_global_search.properties"?: string;
        "_order[fullName]"?: string;
        "_order[employmentStartedAt]"?: string;
        hasActiveEmployment?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Driver collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Driver-transport-driver-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Driver-transport-driver-collection-read"][];
          "text/html": components["schemas"]["Driver-transport-driver-collection-read"][];
        };
      };
    };
  };
  /** Creates a Driver resource. */
  postDriverCollection: {
    /** @description The new Driver resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Driver-transport-driver-collection-write"];
        "application/vnd.api+json": components["schemas"]["Driver-transport-driver-collection-write"];
        "text/html": components["schemas"]["Driver-transport-driver-collection-write"];
      };
    };
    responses: {
      /** @description Driver resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Driver-transport-driver-collection-read"];
          "application/vnd.api+json": components["schemas"]["Driver-transport-driver-collection-read"];
          "text/html": components["schemas"]["Driver-transport-driver-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Driver resource. */
  getDriverItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Driver resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Driver-transport-driver-item-read"];
          "application/vnd.api+json": components["schemas"]["Driver-transport-driver-item-read"];
          "text/html": components["schemas"]["Driver-transport-driver-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Driver resource. */
  putDriverItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Driver resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Driver-transport-driver-item-write"];
        "application/vnd.api+json": components["schemas"]["Driver-transport-driver-item-write"];
        "text/html": components["schemas"]["Driver-transport-driver-item-write"];
      };
    };
    responses: {
      /** @description Driver resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Driver-transport-driver-item-read"];
          "application/vnd.api+json": components["schemas"]["Driver-transport-driver-item-read"];
          "text/html": components["schemas"]["Driver-transport-driver-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the Driver resource. */
  deleteDriverItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Driver resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the Driver resource. */
  patchDriverItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Driver resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Driver-transport-driver-item-write"];
        "application/vnd.api+json": components["schemas"]["Driver-transport-driver-item-write"];
      };
    };
    responses: {
      /** @description Driver resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Driver-transport-driver-item-read"];
          "application/vnd.api+json": components["schemas"]["Driver-transport-driver-item-read"];
          "text/html": components["schemas"]["Driver-transport-driver-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of ExcludedPickup resources. */
  getExcludedPickupCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description description */
        "_global_search.properties"?: string;
        "_order[description]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description ExcludedPickup collection response */
      200: {
        content: {
          "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"][];
          "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"][];
          "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"][];
        };
      };
    };
  };
  /** Creates a ExcludedPickup resource. */
  postExcludedPickupCollection: {
    /** @description The new ExcludedPickup resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-write"];
        "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-write"];
        "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-write"];
      };
    };
    responses: {
      /** @description ExcludedPickup resource created */
      201: {
        content: {
          "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"];
          "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"];
          "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a ExcludedPickup resource. */
  getExcludedPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description ExcludedPickup resource response */
      200: {
        content: {
          "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the ExcludedPickup resource. */
  putExcludedPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated ExcludedPickup resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-write"];
        "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-write"];
        "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-write"];
      };
    };
    responses: {
      /** @description ExcludedPickup resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the ExcludedPickup resource. */
  patchExcludedPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated ExcludedPickup resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-write"];
        "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-write"];
      };
    };
    responses: {
      /** @description ExcludedPickup resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "application/vnd.api+json": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
          "text/html": components["schemas"]["ExcludedPickup-transport-excluded_pickup-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of TransportPickupRequest resources. */
  getTransportPickupRequestCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description TransportPickupRequest collection response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-read"][];
          "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-read"][];
          "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-read"][];
        };
      };
    };
  };
  /** Creates a TransportPickupRequest resource. */
  postTransportPickupRequestCollection: {
    /** @description The new TransportPickupRequest resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TransportPickupRequest"];
        "application/vnd.api+json": components["schemas"]["TransportPickupRequest"];
        "text/html": components["schemas"]["TransportPickupRequest"];
      };
    };
    responses: {
      /** @description TransportPickupRequest resource created */
      201: {
        content: {
          "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-write"];
          "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-write"];
          "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-collection-write"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a TransportPickupRequest resource. */
  getTransportPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description TransportPickupRequest resource response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the TransportPickupRequest resource. */
  putTransportPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated TransportPickupRequest resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-write"];
        "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-write"];
        "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-write"];
      };
    };
    responses: {
      /** @description TransportPickupRequest resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the TransportPickupRequest resource. */
  deleteTransportPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description TransportPickupRequest resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the TransportPickupRequest resource. */
  patchTransportPickupRequestItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated TransportPickupRequest resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-write"];
        "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-write"];
      };
    };
    responses: {
      /** @description TransportPickupRequest resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "application/vnd.api+json": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
          "text/html": components["schemas"]["TransportPickupRequest-transport-pickup_request-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of PickupSchedule resources. */
  getPickupScheduleCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description days, vehicles.type, vehicles.description, relation.name, relation.number, addressBookItem.contact.company, addressBookItem.contact.name, addressBookItem.address.addressLine1, addressBookItem.address.postcode, addressBookItem.address.city, addressBookItem.address.country, depots.description */
        "_global_search.properties"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description PickupSchedule collection response */
      200: {
        content: {
          "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-read"][];
          "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-read"][];
          "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-read"][];
        };
      };
    };
  };
  /** Creates a PickupSchedule resource. */
  postPickupScheduleCollection: {
    /** @description The new PickupSchedule resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PickupSchedule"];
        "application/vnd.api+json": components["schemas"]["PickupSchedule"];
        "text/html": components["schemas"]["PickupSchedule"];
      };
    };
    responses: {
      /** @description PickupSchedule resource created */
      201: {
        content: {
          "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-write"];
          "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-write"];
          "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-collection-write"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a PickupSchedule resource. */
  getPickupScheduleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description PickupSchedule resource response */
      200: {
        content: {
          "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the PickupSchedule resource. */
  putPickupScheduleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated PickupSchedule resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-write"];
        "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-write"];
        "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-write"];
      };
    };
    responses: {
      /** @description PickupSchedule resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the PickupSchedule resource. */
  patchPickupScheduleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated PickupSchedule resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-write"];
        "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-write"];
      };
    };
    responses: {
      /** @description PickupSchedule resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "application/vnd.api+json": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
          "text/html": components["schemas"]["PickupSchedule-transport-pickup_schedule-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Pickup resources. */
  getPickupCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Pickup collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Pickup-transport-pickup-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Pickup-transport-pickup-collection-read"][];
          "text/html": components["schemas"]["Pickup-transport-pickup-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Pickup resource. */
  getPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Pickup resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Pickup-transport-pickup-item-read"];
          "application/vnd.api+json": components["schemas"]["Pickup-transport-pickup-item-read"];
          "text/html": components["schemas"]["Pickup-transport-pickup-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Position resources. */
  getPositionCollection: {
    parameters: {
      query?: {
        "vehicle.id"?: unknown;
        "vehicle.id[]"?: unknown;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Position collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Position-firebase.transport-position.write"][];
          "application/vnd.api+json": components["schemas"]["Position-firebase.transport-position.write"][];
          "text/html": components["schemas"]["Position-firebase.transport-position.write"][];
        };
      };
    };
  };
  /** Creates a Position resource. */
  postPositionCollection: {
    /** @description The new Position resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Position-firebase.transport-position.write"];
        "application/vnd.api+json": components["schemas"]["Position-firebase.transport-position.write"];
        "text/html": components["schemas"]["Position-firebase.transport-position.write"];
      };
    };
    responses: {
      /** @description Position resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Position-firebase.transport-position.write"];
          "application/vnd.api+json": components["schemas"]["Position-firebase.transport-position.write"];
          "text/html": components["schemas"]["Position-firebase.transport-position.write"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Position resource. */
  getPositionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Position resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Position-firebase.transport-position.write"];
          "application/vnd.api+json": components["schemas"]["Position-firebase.transport-position.write"];
          "text/html": components["schemas"]["Position-firebase.transport-position.write"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Postcode resources. */
  getPostcodeCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description postcode, region.name */
        "_global_search.properties"?: string;
        "_order[postcode]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Postcode collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Postcode-transport-postcode-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-collection-read"][];
          "text/html": components["schemas"]["Postcode-transport-postcode-collection-read"][];
        };
      };
    };
  };
  /** Creates a Postcode resource. */
  postPostcodeCollection: {
    /** @description The new Postcode resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Postcode-transport-postcode-collection-write"];
        "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-collection-write"];
        "text/html": components["schemas"]["Postcode-transport-postcode-collection-write"];
      };
    };
    responses: {
      /** @description Postcode resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Postcode-transport-postcode-collection-read"];
          "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-collection-read"];
          "text/html": components["schemas"]["Postcode-transport-postcode-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Postcode resource. */
  getPostcodeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Postcode resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "text/html": components["schemas"]["Postcode-transport-postcode-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Postcode resource. */
  putPostcodeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Postcode resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Postcode-transport-postcode-item-write"];
        "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-item-write"];
        "text/html": components["schemas"]["Postcode-transport-postcode-item-write"];
      };
    };
    responses: {
      /** @description Postcode resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "text/html": components["schemas"]["Postcode-transport-postcode-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the Postcode resource. */
  deletePostcodeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Postcode resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the Postcode resource. */
  patchPostcodeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Postcode resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Postcode-transport-postcode-item-write"];
        "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-item-write"];
      };
    };
    responses: {
      /** @description Postcode resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "application/vnd.api+json": components["schemas"]["Postcode-transport-postcode-item-read"];
          "text/html": components["schemas"]["Postcode-transport-postcode-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Region resources. */
  getRegionCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description name, depot.description */
        "_global_search.properties"?: string;
        "_order[name]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Region collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Region-transport-region-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Region-transport-region-collection-read"][];
          "text/html": components["schemas"]["Region-transport-region-collection-read"][];
        };
      };
    };
  };
  /** Creates a Region resource. */
  postRegionCollection: {
    /** @description The new Region resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Region-transport-region-collection-write"];
        "application/vnd.api+json": components["schemas"]["Region-transport-region-collection-write"];
        "text/html": components["schemas"]["Region-transport-region-collection-write"];
      };
    };
    responses: {
      /** @description Region resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Region-transport-region-collection-read"];
          "application/vnd.api+json": components["schemas"]["Region-transport-region-collection-read"];
          "text/html": components["schemas"]["Region-transport-region-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Region resource. */
  getRegionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Region resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Region-transport-region-item-read"];
          "application/vnd.api+json": components["schemas"]["Region-transport-region-item-read"];
          "text/html": components["schemas"]["Region-transport-region-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Region resource. */
  putRegionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Region resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Region"];
        "application/vnd.api+json": components["schemas"]["Region"];
        "text/html": components["schemas"]["Region"];
      };
    };
    responses: {
      /** @description Region resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Region-transport-region-item-read"];
          "application/vnd.api+json": components["schemas"]["Region-transport-region-item-read"];
          "text/html": components["schemas"]["Region-transport-region-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the Region resource. */
  patchRegionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Region resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Region"];
        "application/vnd.api+json": components["schemas"]["Region"];
      };
    };
    responses: {
      /** @description Region resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Region-transport-region-item-read"];
          "application/vnd.api+json": components["schemas"]["Region-transport-region-item-read"];
          "text/html": components["schemas"]["Region-transport-region-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of RouteCollectionBulk resources. */
  getRouteCollectionBulkCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description RouteCollectionBulk collection response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-collection-read"][];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-collection-read"][];
          "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-collection-read"][];
        };
      };
    };
  };
  /** Creates a RouteCollectionBulk resource. */
  postRouteCollectionBulkCollection: {
    /** @description The new RouteCollectionBulk resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
        "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionBulk resource created */
      201: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a RouteCollectionBulk resource. */
  getRouteCollectionBulkItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollectionBulk resource response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the RouteCollectionBulk resource. */
  putRouteCollectionBulkItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollectionBulk resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
        "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionBulk resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the RouteCollectionBulk resource. */
  patchRouteCollectionBulkItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollectionBulk resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionBulk resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
          "text/html": components["schemas"]["RouteCollectionBulk-transport-route_collection_bulk-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of RouteCollectionVehicle resources. */
  getRouteCollectionVehicleCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description RouteCollectionVehicle collection response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-collection-read"][];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-collection-read"][];
          "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-collection-read"][];
        };
      };
    };
  };
  /** Creates a RouteCollectionVehicle resource. */
  postRouteCollectionVehicleCollection: {
    /** @description The new RouteCollectionVehicle resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
        "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionVehicle resource created */
      201: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a RouteCollectionVehicle resource. */
  getRouteCollectionVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollectionVehicle resource response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the RouteCollectionVehicle resource. */
  putRouteCollectionVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollectionVehicle resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
        "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionVehicle resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the RouteCollectionVehicle resource. */
  deleteRouteCollectionVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollectionVehicle resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the RouteCollectionVehicle resource. */
  patchRouteCollectionVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollectionVehicle resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-write"];
      };
    };
    responses: {
      /** @description RouteCollectionVehicle resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
          "text/html": components["schemas"]["RouteCollectionVehicle-transport-route_collection_vehicle-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of RouteCollection resources. */
  getRouteCollectionCollection: {
    parameters: {
      query?: {
        _global_search?: string;
        /** @description description, status */
        "_global_search.properties"?: string;
        "_order[description]"?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description RouteCollection collection response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollection-transport-route_collection-collection-read"][];
          "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-collection-read"][];
          "text/html": components["schemas"]["RouteCollection-transport-route_collection-collection-read"][];
        };
      };
    };
  };
  /** Creates a RouteCollection resource. */
  postRouteCollectionCollection: {
    /** @description The new RouteCollection resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollection-transport-route_collection-collection-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-collection-write"];
        "text/html": components["schemas"]["RouteCollection-transport-route_collection-collection-write"];
      };
    };
    responses: {
      /** @description RouteCollection resource created */
      201: {
        content: {
          "application/json": components["schemas"]["RouteCollection-transport-route_collection-collection-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-collection-read"];
          "text/html": components["schemas"]["RouteCollection-transport-route_collection-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a RouteCollection resource. */
  getRouteCollectionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollection resource response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "text/html": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the RouteCollection resource. */
  putRouteCollectionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollection resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RouteCollection-transport-route_collection-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-item-write"];
        "text/html": components["schemas"]["RouteCollection-transport-route_collection-item-write"];
      };
    };
    responses: {
      /** @description RouteCollection resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "text/html": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the RouteCollection resource. */
  patchRouteCollectionItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated RouteCollection resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["RouteCollection-transport-route_collection-item-write"];
        "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-item-write"];
      };
    };
    responses: {
      /** @description RouteCollection resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "application/vnd.api+json": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
          "text/html": components["schemas"]["RouteCollection-transport-route_collection-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of RouteCollectionBulk resources. */
  api_route_collections_route_collection_bulks_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollectionBulk collection response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionBulk"][];
          "application/vnd.api+json": components["schemas"]["RouteCollectionBulk"][];
          "text/html": components["schemas"]["RouteCollectionBulk"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of RouteCollectionVehicle resources. */
  api_route_collections_route_collection_vehicles_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description RouteCollectionVehicle collection response */
      200: {
        content: {
          "application/json": components["schemas"]["RouteCollectionVehicle"][];
          "application/vnd.api+json": components["schemas"]["RouteCollectionVehicle"][];
          "text/html": components["schemas"]["RouteCollectionVehicle"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Route resources. */
  api_route_collections_routes_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Route collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Route"][];
          "application/vnd.api+json": components["schemas"]["Route"][];
          "text/html": components["schemas"]["Route"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Step resources. */
  api_route_collections_routes_steps_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
        routes: string;
      };
    };
    responses: {
      /** @description Step collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Step"][];
          "application/vnd.api+json": components["schemas"]["Step"][];
          "text/html": components["schemas"]["Step"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Unassigned resources. */
  api_route_collections_unassigneds_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Unassigned collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Unassigned"][];
          "application/vnd.api+json": components["schemas"]["Unassigned"][];
          "text/html": components["schemas"]["Unassigned"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Route resources. */
  getRouteCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Route collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Route-transport-route-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Route-transport-route-collection-read"][];
          "text/html": components["schemas"]["Route-transport-route-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Route resource. */
  getRouteItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Route resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Route-transport-route-item-read"];
          "application/vnd.api+json": components["schemas"]["Route-transport-route-item-read"];
          "text/html": components["schemas"]["Route-transport-route-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Route resource. */
  putRouteItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Route resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Route-transport-route-item-write"];
        "application/vnd.api+json": components["schemas"]["Route-transport-route-item-write"];
        "text/html": components["schemas"]["Route-transport-route-item-write"];
      };
    };
    responses: {
      /** @description Route resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Route-transport-route-item-read"];
          "application/vnd.api+json": components["schemas"]["Route-transport-route-item-read"];
          "text/html": components["schemas"]["Route-transport-route-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Updates the Route resource. */
  patchRouteItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Route resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Route-transport-route-item-write"];
        "application/vnd.api+json": components["schemas"]["Route-transport-route-item-write"];
      };
    };
    responses: {
      /** @description Route resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Route-transport-route-item-read"];
          "application/vnd.api+json": components["schemas"]["Route-transport-route-item-read"];
          "text/html": components["schemas"]["Route-transport-route-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Step resources. */
  api_routes_steps_get_subresource: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Step collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Step"][];
          "application/vnd.api+json": components["schemas"]["Step"][];
          "text/html": components["schemas"]["Step"][];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Status resources. */
  getStatusCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Status collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Status-transport-status-read"][];
          "application/vnd.api+json": components["schemas"]["Status-transport-status-read"][];
          "text/html": components["schemas"]["Status-transport-status-read"][];
        };
      };
    };
  };
  /** Creates a Status resource. */
  postStatusCollection: {
    /** @description The new Status resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Status-transport-status-write"];
        "application/vnd.api+json": components["schemas"]["Status-transport-status-write"];
        "text/html": components["schemas"]["Status-transport-status-write"];
      };
    };
    responses: {
      /** @description Status resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Status-transport-status-read"];
          "application/vnd.api+json": components["schemas"]["Status-transport-status-read"];
          "text/html": components["schemas"]["Status-transport-status-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Status resource. */
  getStatusItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Status resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Status-transport-status-read"];
          "application/vnd.api+json": components["schemas"]["Status-transport-status-read"];
          "text/html": components["schemas"]["Status-transport-status-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Step resources. */
  getStepCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Step collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Step-transport-step-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Step-transport-step-collection-read"][];
          "text/html": components["schemas"]["Step-transport-step-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Step resource. */
  getStepItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Step resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Step-transport-step-collection-read"];
          "application/vnd.api+json": components["schemas"]["Step-transport-step-collection-read"];
          "text/html": components["schemas"]["Step-transport-step-collection-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Removes the Step resource. */
  deleteStepItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Step resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of TaskActivity resources. */
  getTaskActivityCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description TaskActivity collection response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskActivity-transport-task-activity-collection-read"][];
          "application/vnd.api+json": components["schemas"]["TaskActivity-transport-task-activity-collection-read"][];
          "text/html": components["schemas"]["TaskActivity-transport-task-activity-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a TaskActivity resource. */
  getTaskActivityItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description TaskActivity resource response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskActivity-transport-task-activity-item-read"];
          "application/vnd.api+json": components["schemas"]["TaskActivity-transport-task-activity-item-read"];
          "text/html": components["schemas"]["TaskActivity-transport-task-activity-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of TaskLabel resources. */
  getTaskLabelCollection: {
    parameters: {
      query?: {
        "label.shipment.status"?: string;
        "label.shipment.status[]"?: string[];
        _global_search?: string;
        /** @description label.shipment.relation.name, pickupActivity.depot.description, pickupActivity.description, pickupActivity.address.addressLine1, pickupActivity.address.postcode, pickupActivity.address.city, deliveryActivities.depot.description, deliveryActivities.description, deliveryActivities.address.addressLine1, deliveryActivities.address.postcode, deliveryActivities.address.city */
        "_global_search.properties"?: string;
        "_order[dateRange.begin]"?: string;
        "dateRange.begin[before]"?: string;
        "dateRange.begin[strictly_before]"?: string;
        "dateRange.begin[after]"?: string;
        "dateRange.begin[strictly_after]"?: string;
        "dateRange.end[before]"?: string;
        "dateRange.end[strictly_before]"?: string;
        "dateRange.end[after]"?: string;
        "dateRange.end[strictly_after]"?: string;
        status?: string;
        "status[]"?: string[];
        deliveryStatus?: string;
        "deliveryStatus[]"?: string[];
        "region.depot.id"?: unknown;
        "region.depot.id[]"?: unknown;
        "exists[pickupActivity.step]"?: boolean;
        "exists[status]"?: boolean;
        "exists[followUpTask]"?: boolean;
        error?: boolean;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description TaskLabel collection response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskLabel-transport-task-collection-read_transport-task_label-collection-read"][];
          "application/vnd.api+json": components["schemas"]["TaskLabel-transport-task-collection-read_transport-task_label-collection-read"][];
          "text/html": components["schemas"]["TaskLabel-transport-task-collection-read_transport-task_label-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a TaskLabel resource. */
  getTaskLabelItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description TaskLabel resource response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskLabel-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["TaskLabel-transport-task-item-read"];
          "text/html": components["schemas"]["TaskLabel-transport-task-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the TaskLabel resource. */
  putTaskLabelItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated TaskLabel resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaskLabel-transport-task-item-write"];
        "application/vnd.api+json": components["schemas"]["TaskLabel-transport-task-item-write"];
        "text/html": components["schemas"]["TaskLabel-transport-task-item-write"];
      };
    };
    responses: {
      /** @description TaskLabel resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["TaskLabel-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["TaskLabel-transport-task-item-read"];
          "text/html": components["schemas"]["TaskLabel-transport-task-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of TaskPickup resources. */
  getTaskPickupCollection: {
    parameters: {
      query?: {
        "_order[dateRange.begin]"?: string;
        "dateRange.begin[before]"?: string;
        "dateRange.begin[strictly_before]"?: string;
        "dateRange.begin[after]"?: string;
        "dateRange.begin[strictly_after]"?: string;
        "dateRange.end[before]"?: string;
        "dateRange.end[strictly_before]"?: string;
        "dateRange.end[after]"?: string;
        "dateRange.end[strictly_after]"?: string;
        status?: string;
        "status[]"?: string[];
        deliveryStatus?: string;
        "deliveryStatus[]"?: string[];
        "region.depot.id"?: unknown;
        "region.depot.id[]"?: unknown;
        "exists[pickupActivity.step]"?: boolean;
        "exists[status]"?: boolean;
        "exists[followUpTask]"?: boolean;
        error?: boolean;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description TaskPickup collection response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskPickup-transport-task-collection-read"][];
          "application/vnd.api+json": components["schemas"]["TaskPickup-transport-task-collection-read"][];
          "text/html": components["schemas"]["TaskPickup-transport-task-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a TaskPickup resource. */
  getTaskPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description TaskPickup resource response */
      200: {
        content: {
          "application/json": components["schemas"]["TaskPickup-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["TaskPickup-transport-task-item-read"];
          "text/html": components["schemas"]["TaskPickup-transport-task-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the TaskPickup resource. */
  putTaskPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated TaskPickup resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TaskPickup-transport-task-item-write"];
        "application/vnd.api+json": components["schemas"]["TaskPickup-transport-task-item-write"];
        "text/html": components["schemas"]["TaskPickup-transport-task-item-write"];
      };
    };
    responses: {
      /** @description TaskPickup resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["TaskPickup-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["TaskPickup-transport-task-item-read"];
          "text/html": components["schemas"]["TaskPickup-transport-task-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Task resources. */
  getTaskCollection: {
    parameters: {
      query?: {
        "_order[dateRange.begin]"?: string;
        "dateRange.begin[before]"?: string;
        "dateRange.begin[strictly_before]"?: string;
        "dateRange.begin[after]"?: string;
        "dateRange.begin[strictly_after]"?: string;
        "dateRange.end[before]"?: string;
        "dateRange.end[strictly_before]"?: string;
        "dateRange.end[after]"?: string;
        "dateRange.end[strictly_after]"?: string;
        status?: string;
        "status[]"?: string[];
        deliveryStatus?: string;
        "deliveryStatus[]"?: string[];
        "region.depot.id"?: unknown;
        "region.depot.id[]"?: unknown;
        "exists[pickupActivity.step]"?: boolean;
        "exists[status]"?: boolean;
        "exists[followUpTask]"?: boolean;
        error?: boolean;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Task collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Task-transport-task-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Task-transport-task-collection-read"][];
          "text/html": components["schemas"]["Task-transport-task-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Task resource. */
  getTaskItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Task resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Task-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["Task-transport-task-item-read"];
          "text/html": components["schemas"]["Task-transport-task-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Task resource. */
  putTaskItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Task resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Task-transport-task-item-write"];
        "application/vnd.api+json": components["schemas"]["Task-transport-task-item-write"];
        "text/html": components["schemas"]["Task-transport-task-item-write"];
      };
    };
    responses: {
      /** @description Task resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Task-transport-task-item-read"];
          "application/vnd.api+json": components["schemas"]["Task-transport-task-item-read"];
          "text/html": components["schemas"]["Task-transport-task-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of UnassignedLabel resources. */
  getUnassignedLabelCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description UnassignedLabel collection response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedLabel"][];
          "application/vnd.api+json": components["schemas"]["UnassignedLabel"][];
          "text/html": components["schemas"]["UnassignedLabel"][];
        };
      };
    };
  };
  /** Retrieves a UnassignedLabel resource. */
  getUnassignedLabelItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description UnassignedLabel resource response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedLabel-transport-unassigned-item-read"];
          "application/vnd.api+json": components["schemas"]["UnassignedLabel-transport-unassigned-item-read"];
          "text/html": components["schemas"]["UnassignedLabel-transport-unassigned-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of UnassignedPickup resources. */
  getUnassignedPickupCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description UnassignedPickup collection response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedPickup"][];
          "application/vnd.api+json": components["schemas"]["UnassignedPickup"][];
          "text/html": components["schemas"]["UnassignedPickup"][];
        };
      };
    };
  };
  /** Retrieves a UnassignedPickup resource. */
  getUnassignedPickupItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description UnassignedPickup resource response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedPickup-transport-unassigned-item-read"];
          "application/vnd.api+json": components["schemas"]["UnassignedPickup-transport-unassigned-item-read"];
          "text/html": components["schemas"]["UnassignedPickup-transport-unassigned-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of UnassignedShipment resources. */
  getUnassignedShipmentCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description UnassignedShipment collection response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedShipment"][];
          "application/vnd.api+json": components["schemas"]["UnassignedShipment"][];
          "text/html": components["schemas"]["UnassignedShipment"][];
        };
      };
    };
  };
  /** Retrieves a UnassignedShipment resource. */
  getUnassignedShipmentItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description UnassignedShipment resource response */
      200: {
        content: {
          "application/json": components["schemas"]["UnassignedShipment-transport-unassigned-item-read"];
          "application/vnd.api+json": components["schemas"]["UnassignedShipment-transport-unassigned-item-read"];
          "text/html": components["schemas"]["UnassignedShipment-transport-unassigned-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Unassigned resources. */
  getUnassignedCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Unassigned collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Unassigned-transport-unassigned-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Unassigned-transport-unassigned-collection-read"][];
          "text/html": components["schemas"]["Unassigned-transport-unassigned-collection-read"][];
        };
      };
    };
  };
  /** Retrieves a Unassigned resource. */
  getUnassignedItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Unassigned resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Unassigned-transport-unassigned-item-read"];
          "application/vnd.api+json": components["schemas"]["Unassigned-transport-unassigned-item-read"];
          "text/html": components["schemas"]["Unassigned-transport-unassigned-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Vehicle resources. */
  getVehicleCollection: {
    parameters: {
      query?: {
        type?: string;
        "type[]"?: string[];
        "depot.key"?: string;
        "depot.key[]"?: string[];
        _global_search?: string;
        /** @description licensePlate, phoneNumber, description, type, depot.description */
        "_global_search.properties"?: string;
        "depot.id"?: unknown;
        "depot.id[]"?: unknown;
        availabilityAt?: string;
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Vehicle collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle-transport-vehicle-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-collection-read"][];
          "text/html": components["schemas"]["Vehicle-transport-vehicle-collection-read"][];
        };
      };
    };
  };
  /** Creates a Vehicle resource. */
  postVehicleCollection: {
    /** @description The new Vehicle resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Vehicle-transport-vehicle-collection-write"];
        "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-collection-write"];
        "text/html": components["schemas"]["Vehicle-transport-vehicle-collection-write"];
      };
    };
    responses: {
      /** @description Vehicle resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Vehicle-transport-vehicle-collection-read"];
          "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-collection-read"];
          "text/html": components["schemas"]["Vehicle-transport-vehicle-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Vehicle resource. */
  getVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Vehicle resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "text/html": components["schemas"]["Vehicle-transport-vehicle-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Replaces the Vehicle resource. */
  putVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Vehicle resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Vehicle-transport-vehicle-item-write"];
        "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-item-write"];
        "text/html": components["schemas"]["Vehicle-transport-vehicle-item-write"];
      };
    };
    responses: {
      /** @description Vehicle resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "text/html": components["schemas"]["Vehicle-transport-vehicle-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Removes the Vehicle resource. */
  deleteVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Vehicle resource deleted */
      204: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Updates the Vehicle resource. */
  patchVehicleItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description The updated Vehicle resource */
    requestBody?: {
      content: {
        "application/merge-patch+json": components["schemas"]["Vehicle-transport-vehicle-item-write"];
        "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-item-write"];
      };
    };
    responses: {
      /** @description Vehicle resource updated */
      200: {
        content: {
          "application/json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "application/vnd.api+json": components["schemas"]["Vehicle-transport-vehicle-item-read"];
          "text/html": components["schemas"]["Vehicle-transport-vehicle-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a WarehouseInformation resource. */
  getWarehouseInformationItem: {
    parameters: {
      path: {
        waybill: string;
      };
    };
    responses: {
      /** @description WarehouseInformation resource response */
      200: {
        content: {
          "application/json": components["schemas"]["WarehouseInformation-transport-warehouse_waybill_info-read"];
          "application/vnd.api+json": components["schemas"]["WarehouseInformation-transport-warehouse_waybill_info-read"];
          "text/html": components["schemas"]["WarehouseInformation-transport-warehouse_waybill_info-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of WarehouseInformation resources. */
  getWarehouseInformationCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description WarehouseInformation collection response */
      200: {
        content: {
          "application/json": components["schemas"]["WarehouseInformation"][];
          "application/vnd.api+json": components["schemas"]["WarehouseInformation"][];
          "text/html": components["schemas"]["WarehouseInformation"][];
        };
      };
    };
  };
  /** Retrieves the collection of Type resources. */
  getTypeCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Type collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Type-type"][];
          "application/vnd.api+json": components["schemas"]["Type-type"][];
          "text/html": components["schemas"]["Type-type"][];
        };
      };
    };
  };
  /** Retrieves a Type resource. */
  getTypeItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Type resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Type-type"];
          "application/vnd.api+json": components["schemas"]["Type-type"];
          "text/html": components["schemas"]["Type-type"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of User resources. */
  getUserCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description User collection response */
      200: {
        content: {
          "application/json": components["schemas"]["User-user-collection-read"][];
          "application/vnd.api+json": components["schemas"]["User-user-collection-read"][];
          "text/html": components["schemas"]["User-user-collection-read"][];
        };
      };
    };
  };
  /** Creates a User resource. */
  postUserCollection: {
    /** @description The new User resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["User-user-collection-write"];
        "application/vnd.api+json": components["schemas"]["User-user-collection-write"];
        "text/html": components["schemas"]["User-user-collection-write"];
      };
    };
    responses: {
      /** @description User resource created */
      201: {
        content: {
          "application/json": components["schemas"]["User-user-collection-read"];
          "application/vnd.api+json": components["schemas"]["User-user-collection-read"];
          "text/html": components["schemas"]["User-user-collection-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a User resource. */
  getUserItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description User resource response */
      200: {
        content: {
          "application/json": components["schemas"]["User-user-item-read"];
          "application/vnd.api+json": components["schemas"]["User-user-item-read"];
          "text/html": components["schemas"]["User-user-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Webhook resources. */
  getWebhookCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Webhook collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook-webhook-collection-read"][];
          "application/vnd.api+json": components["schemas"]["Webhook-webhook-collection-read"][];
          "text/html": components["schemas"]["Webhook-webhook-collection-read"][];
        };
      };
    };
  };
  /** Creates a Webhook resource. */
  postWebhookCollection: {
    /** @description The new Webhook resource */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Webhook-webhook-write"];
        "application/vnd.api+json": components["schemas"]["Webhook-webhook-write"];
        "text/html": components["schemas"]["Webhook-webhook-write"];
      };
    };
    responses: {
      /** @description Webhook resource created */
      201: {
        content: {
          "application/json": components["schemas"]["Webhook-webhook-item-read"];
          "application/vnd.api+json": components["schemas"]["Webhook-webhook-item-read"];
          "text/html": components["schemas"]["Webhook-webhook-item-read"];
        };
      };
      /** @description Invalid input */
      400: {
        content: {
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
      /** @description Unprocessable entity */
      422: {
        content: {
        };
      };
    };
  };
  /** Retrieves a Webhook resource. */
  getWebhookItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Webhook resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Webhook-webhook-item-read"];
          "application/vnd.api+json": components["schemas"]["Webhook-webhook-item-read"];
          "text/html": components["schemas"]["Webhook-webhook-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
  /** Retrieves the collection of Widget resources. */
  getWidgetCollection: {
    parameters: {
      query?: {
        /** @description The collection page number */
        _page?: number;
        /** @description The number of items per page */
        _items_per_page?: number;
        /** @description Enable or disable pagination */
        _pagination?: boolean;
      };
    };
    responses: {
      /** @description Widget collection response */
      200: {
        content: {
          "application/json": components["schemas"]["Widget-widget-read"][];
          "application/vnd.api+json": components["schemas"]["Widget-widget-read"][];
          "text/html": components["schemas"]["Widget-widget-read"][];
        };
      };
    };
  };
  /** Retrieves a Widget resource. */
  getWidgetItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Widget resource response */
      200: {
        content: {
          "application/json": components["schemas"]["Widget-widget-item-read"];
          "application/vnd.api+json": components["schemas"]["Widget-widget-item-read"];
          "text/html": components["schemas"]["Widget-widget-item-read"];
        };
      };
      /** @description Resource not found */
      404: {
        content: {
        };
      };
    };
  };
}
